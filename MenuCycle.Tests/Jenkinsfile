#!groovy
properties([
	parameters([
		string(name: 'Include_Tags', defaultValue: '', description: 'The test tags to run. Empty if all. This only applies to the master execution. Smoke tests are dealt separately'),
		string(name: 'Exclude_Tags', defaultValue: '', description: 'The test tags to exclude. This only applies to the master execution. Smoke tests are dealt separately'),
	])
])

releaseTag = ''
commonReleaseBuildParams = ''
solutionPath = ''
msbuild = ''

//List of App.config mobile transformations to be run by Jenkins
//appsList = ['AndroidApp', 'iOsApp']

solutionName = "MenuCycle.Automation.sln"
projectPath = "MenuCycle.Tests"
projectName = "MenuCycle.Tests.csproj"

node('IE1UIBLD03') {
	stage ('Get Source Code') {

		checkout([
		$class: 'GitSCM',
		branches: scm.branches,
		extensions: scm.extensions + [[$class: 'CleanCheckout']],
		userRemoteConfigs: scm.userRemoteConfigs
		])

		echo "Retrieved $env.BRANCH_NAME in workspace: $env.WORKSPACE"
	}

	commonReleaseBuildParams = "/p:CI_BuildNum=${env.BUILD_ID};CI_BuildId=${releaseTag}"
	solutionPath = "$env.WORKSPACE/$solutionName"
	msbuild = tool 'v15'

	def jobName = "${env.JOB_NAME}"

	//List of App.config browser transformations to be run by Jenkins
	def device = ''

	// Chech for configuration in Job Name
	device = ['Chrome', 'Firefox', 'IE', 'iPadAir', 'iPadMini4', 'iPadPro9', 'SamsungTabA', 'SamsungTabS'].find
	{
		jobName.contains("${it}")
	}

	// Checking for excluding tags first and removeing them, to avoid passing them as include tags
	// Chech for exclude tags in Job Name
	['-QAI', '-UAT', '-PRELIVE', '-EMEA', '-NA'].each
	{
		if (jobName.contains("${it}"))
		{
				excludeTag("${it}")
				jobName.replace("${it}", "")
		}
	}

	// Chech for include tags in Job Name
	['Smoke', 'QAI', 'UAT', 'PRELIVE', 'EMEA', 'NA'].each
	{
		if (jobName.contains("${it}"))
		{
				includeTag("${it}")
				jobName.replace("${it}", "")
		}
	}

	stage('Initialize') {
	 script { currentBuild.description = "Including: ${Include_Tags} Excluding: ${Exclude_Tags}" }


		echo 'Restore nuget packages for solution'
		bat "\"$env.WORKSPACE/Tools/nuget.exe\" restore \"$solutionPath\" -configFile Tools/NugetSources.Config"
		bat "dotnet restore \"$solutionPath\""

		//echo 'Build Release Configuration'
		//bat "\"$msbuild\" ./$projectPath/$projectName /p:OutDir=\"$env.WORKSPACE\" $commonReleaseBuildParams /p:Configuration=Release"
	}

	try {
			stage ('Build assemblies') {
					buildConfigurations(device)
			}
	} catch (e) {
			echo e.message
			currentBuild.result = "FAILED"
	}

	if (jobName.contains("Remote"))
	{
		try {
				stage ('Copy build artifacts to Mac Mini')
				 {
					  //bat "C:/Users/Jenkins/ssh.exe UIMCM@0.tcp.ngrok.io -p10556 rm -rf /FromJenkins/${projectPath}/${device}/"
						bat "C:/Users/Jenkins/ssh.exe UIMCM@0.tcp.ngrok.io -p10556 mkdir -p ~/FromJenkins/${projectPath}/${device}/"
						bat "C:/Windows/System32/OpenSSH/scp -r -P 10556 \"$env.WORKSPACE/${projectPath}/bin/${device}/\" UIMCM@0.tcp.ngrok.io:~/FromJenkins/${projectPath}/${device}/"
				}
		} catch (e) {
				echo e.message
				currentBuild.result = "FAILED"
		}
	}

	try {
			stage ('Run Tests')
			{
				if (jobName.contains("Remote"))
				{
					runTestsRemote(device)
				}
				else
				{
					runTests(device)
				}
			}
	} catch (e) {
			echo e.message
			currentBuild.result = "FAILED"
	}


    try {
        stage('Test Results Archive') {
            archiveArtifacts artifacts: '*TestResults.xml'
            nunit testResultsPattern: '*TestResults.xml'
            cucumber fileIncludePattern: '**/*.json', jsonReportDirectory: "$projectPath/bin"
        }
    } catch (e) {
        echo e
        currentBuild.result = "FAILED"
    }
}

def buildConfigurations(device)
{
        echo "Building ${device}"
        bat "\"$msbuild\" \"${solutionPath}\" /t:Rebuild $commonReleaseBuildParams /p:Configuration=\"${device}\""
}

def runTests(device)
{
    if (Include_Tags == '' && Exclude_Tags == ''){
        print "Not tag to include or exclude. Running all tests"
        bat "nunit ${projectPath}/bin/${device}/MenuCycle.Tests.dll --result:${device}TestResults.xml;format=nunit2 --framework:net-4.5"
    }
    else
    {

			def include = ''
			def includeTags = Include_Tags.split(',')
			def isFirstTag = true

			if (Include_Tags != '')
			{
				includeTags.each
				{
					def and = isFirstTag ? '' : " && "
					include += "${and}cat == ${it}"
					isFirstTag = false
				}
			}

			def exclude = ''
			def excludeTags = Exclude_Tags.split(',')
		 	isFirstTag = true

			if (Exclude_Tags != '')
			{
				excludeTags.each
				{
					def or = isFirstTag ? '' : " || "
					exclude += "${or}cat != ${it}"
					isFirstTag = false
				}
			}

			def and = Include_Tags != '' && Exclude_Tags != '' ? " && " : ''

      print "Including tags:  ${Include_Tags}"
			print "Excluding tags:  ${Exclude_Tags}"

      bat "nunit ${projectPath}/bin/${device}/MenuCycle.Tests.dll --result:${device}TestResults.xml;format=nunit2 --framework:net-4.5 -where \"${include}${and}${exclude}\""
    }
}

def runTestsRemote(device)
{
    if (Include_Tags == '' && Exclude_Tags == ''){
        print "Not tag to include or exclude. Running all tests"
        bat "C:/Users/Jenkins/ssh.exe UIMCM@0.tcp.ngrok.io -p10556 /Library/Frameworks/Mono.framework/Versions/Current/Commands/mono /Users/uimcm/NUnit.Console-3.8.0/nunit3-console.exe /Users/uimcm/FromJenkins/${projectPath}/${device}/MenuCycle.Tests.dll --result:${device}TestResults.xml;format=nunit2 --framework:net-4.5"
    }
    else
    {

			def include = ''
			def includeTags = Include_Tags.split(',')
			def isFirstTag = true

			if (Include_Tags != '')
			{
				includeTags.each
				{
					def and = isFirstTag ? '' : " && "
					include += "${and}cat == ${it}"
					isFirstTag = false
				}
			}

			def exclude = ''
			def excludeTags = Exclude_Tags.split(',')
		 	isFirstTag = true

			if (Exclude_Tags != '')
			{
				excludeTags.each
				{
					def or = isFirstTag ? '' : " || "
					exclude += "${or}cat != ${it}"
					isFirstTag = false
				}
			}

			def and = Include_Tags != '' && Exclude_Tags != '' ? " && " : ''

      print "Including tags:  ${Include_Tags}"
			print "Excluding tags:  ${Exclude_Tags}"

			bat "C:/Users/Jenkins/ssh.exe UIMCM@0.tcp.ngrok.io -p10556 /Library/Frameworks/Mono.framework/Versions/Current/Commands/mono /Users/uimcm/NUnit.Console-3.8.0/nunit3-console.exe \"/Users/uimcm/FromJenkins/${projectPath}/${device}/MenuCycle.Tests.dll --result:${device}TestResults.xml;format=nunit2 --where:${include}${and}${exclude} --framework:net-4.5\""
		}
}

def includeTag(tag)
{
	if (Include_Tags != '')
	{
		Include_Tags += ",${tag}"
	}
	else
	{
		Include_Tags = "${tag}"
	}
}

def excludeTag(tag)
{
	if (Exclude_Tags != '')
	{
		Exclude_Tags += ",${tag}"
	}
	else
	{
		Exclude_Tags = "${tag}"
	}
}

#!groovy
def androidDevices = ['Nexus7', 'SamsungTabA', 'SamsungTabS']
def appleDevices = ['iPadAir', 'iPadMini4', 'iPadPro9', 'iPadPro2018', 'iPhone7Plus']
def mobileDevices = androidDevices + appleDevices
def browsers = ['Chrome', 'ChromeLongTimeOut', 'Firefox', 'IE', 'IELongTimeOut', 'Safari']

def jobName = "${env.JOB_NAME}"
def cronSchedule = (jobName =~ /H\d{2}/)

if (cronSchedule.count)
{
	cronSchedule = cronSchedule[0].replaceAll("(?<=\\D)(?=\\d)"," ");
	cronSchedule += " * * *"
	cronSchedule = "TZ=Europe/Sofia\n" + cronSchedule
}
else
{
	cronSchedule = ''
}

properties([
	parameters([
		string(name: 'Include_Tags', defaultValue: '', description: 'Tests containing these tags will be executed. Empty for all tests.(comma separated/no whitespaces/)'),
		string(name: 'Exclude_Tags', defaultValue: '', description: 'Tests containing these tags will NOT be executed.'),
		string(name: 'Remote_Port', defaultValue: '23017', description: 'Port for tunnel to remote machine.(only needed for Remote jobs)'),
	]),
	pipelineTriggers([cron(cronSchedule)]),
])

releaseTag = ''
commonReleaseBuildParams = ''
solutionPath = ''
msbuild = ''

solutionName = "MenuCycle.Automation.sln"
projectName = "MenuCycle.Tests"
remotePort = "$Remote_Port";
jobNameFormatted = "${env.JOB_NAME.split('/').last().replaceAll("\\s","_")}"
remotePath = "~/FromJenkins/${jobNameFormatted}"
isRemote = jobName.contains("Remote")

node('IE1UIBLD03') {
	stage ('Get Source Code') {

		checkout([
		$class: 'GitSCM',
		branches: scm.branches,
		extensions: scm.extensions + [[$class: 'CleanCheckout']],
		userRemoteConfigs: scm.userRemoteConfigs
		])

		echo "Retrieved $env.BRANCH_NAME in workspace: $env.WORKSPACE"
	}

	commonReleaseBuildParams = "/p:CI_BuildNum=${env.BUILD_ID};CI_BuildId=${releaseTag}"
	solutionPath = "$env.WORKSPACE/$solutionName"
	msbuild = tool 'v15'

	if (isRemote)
 	{
		print "\"Remote\" keyword found. Tests will execute on remote machine.."
	}

	// Get device from the job name
	def device = ''
	device = (mobileDevices + browsers).find
	{
		jobName =~ /\b${it}\b/
	}

	if (!device)
	{
		currentBuild.result = 'ABORTED'
		error("${device} is not supported !\nStopping job...")
	}

  // Chech for exclude tags in the Job Name, and removing them from jobName variable to avoid reading them as include tags
	['-QAI', '-UAT', '-PRELIVE', '-EMEA', '-NA', '-Sanity'].each
	{
		if (jobName.contains("${it}"))
		{
				excludeTag("${it}".replaceAll("-","\\s"))
				jobName.replace("${it}", "")
		}
	}

	// Chech for include tags in Job Name
	['Smoke', 'QAI', 'UAT', 'PRELIVE', 'EMEA', 'NA', 'Sanity', 'Performance', 'E2E'].each
	{
		if (jobName.contains("${it}"))
		{
				includeTag("${it}")
				jobName.replace("${it}", "")
		}
	}

  // Exclude Performance tests for non-performance jobs
	if (!Include_Tags.contains("Performance"))
	{
		excludeTag("Performance")
	}

  // Exclude E2E tests for non-E2E jobs
	if (!Include_Tags.contains("E2E"))
	{
		excludeTag("E2E")
	}

	stage('Initialize')
	{
		if(isRemote && device in mobileDevices)
		{
			// Get the device id from the Config file
			currentDeviceConfig = bat(returnStdout:true, script: "more \"$env.WORKSPACE/${projectName}/App.${device}.config\"")
			currentDeviceId = ""

			if (device in appleDevices)
			{
				currentDeviceId = (currentDeviceConfig =~ '(?<=udid" value=")[^"]*')[0]
				currentDeviceId = currentDeviceId.replaceAll("-","")
			}

			if (device in androidDevices)
			{
				currentDeviceId = (currentDeviceConfig =~ '(?<=serial" value=")[^"]*')[0]
			}

			// Check if device is connected to the machine
			echo "Looking for ${device} with id ${currentDeviceId} ..."
			connectedDevices = bat (returnStdout:true, script: "@C:/Users/Jenkins/ssh.exe UIMCM@1.tcp.eu.ngrok.io -p$remotePort ioreg -p IOUSB -w0 -l")

			if (!connectedDevices.contains(currentDeviceId))
		  {
				currentBuild.result = 'ABORTED'
				error("${device} is not connected !\nStopping job...")
			}
			else
			{
				echo "${device} is connected...\nJob continues..."
			}
		}

	  script { currentBuild.description = "Including: ${Include_Tags} Excluding: ${Exclude_Tags}" }

		echo 'Restore nuget packages for solution'
		bat "\"$env.WORKSPACE/Tools/nuget.exe\" restore \"$solutionPath\" -configFile Tools/NugetSources.Config"
		bat "dotnet restore \"$solutionPath\""
	}

	try
	{
			stage ('Build assemblies')
			{
					buildConfigurations(device)
			}
	}
	catch (e)
	{
			echo e.message
			currentBuild.result = "FAILED"
	}

	if (isRemote)
	{
		try
		{
				stage ('Copy build artifacts to remote machine')
				 {
					  bat "C:/Users/Jenkins/ssh.exe UIMCM@1.tcp.eu.ngrok.io -p$remotePort rm -rf ${remotePath}/"
						bat "C:/Users/Jenkins/ssh.exe UIMCM@1.tcp.eu.ngrok.io -p$remotePort mkdir ${remotePath}/"
						bat "C:/Users/Jenkins/scp.exe -v -r -P $remotePort \"$env.WORKSPACE/${projectName}/bin/${device}/.\" UIMCM@1.tcp.eu.ngrok.io:${remotePath}/"
				 }
		}
		catch (e)
		{
				echo e.message
				currentBuild.result = "FAILED"
		}
	}

	try
	{
			stage ('Run Tests')
			{
					runTests(device)
			}
	}
	catch (e)
	{
			echo e.message
			currentBuild.result = "FAILED"
	}


    try
		{
        stage('Test Results Archive')
				{
					if (isRemote)
					{
						echo "Copying test results from remote machine to workspace.."
						bat "mkdir \"$env.WORKSPACE/${projectName}/bin/${device}/Reports/\""
						bat "C:/Users/Jenkins/scp.exe -v -P $remotePort UIMCM@1.tcp.eu.ngrok.io:~/NUnit.Console-3.8.0/${device}TestResults.xml \"$env.WORKSPACE/\""
						bat "C:/Users/Jenkins/scp.exe -v -P $remotePort UIMCM@1.tcp.eu.ngrok.io:${remotePath}/Reports/Reports_${jobNameFormatted}.json \"$env.WORKSPACE/${projectName}/bin/\""
					}

						archiveArtifacts artifacts: '*TestResults.xml'
            nunit testResultsPattern: '*TestResults.xml'
            cucumber fileIncludePattern: '**/Reports*.json', jsonReportDirectory: "$projectName/bin"

						sendSlackNotification(testReport(), '#MC-TestAutomation')
        }
    }
		catch (e)
		{
        echo e
        currentBuild.result = "FAILED"
    }
}

def buildConfigurations(device)
{
        echo "Building ${device}"
        bat "\"$msbuild\" \"${solutionPath}\" /t:Rebuild $commonReleaseBuildParams /p:Configuration=\"${device}\""
}


def runTests(device)
{
			// First part of the method formats include/exclude tags as parameters for Nunit-Console, depending on all possible combinations
			def includeParameter = ''
			def includeTagsList = Include_Tags.split(',')
			def isFirstTag = true

			// Check if list is empty
			if (Include_Tags != '')
			{
				includeTagsList.each
				{
					def and = isFirstTag ? '' : " && "
					includeParameter += "${and}cat == ${it}"
					isFirstTag = false
				}
			}

			def excludeParameter = ''
			def excludeTagsList = Exclude_Tags.split(',')
		 	isFirstTag = true

			// Check if list is empty
			if (Exclude_Tags != '')
			{
				excludeTagsList.each
				{
					def or = isFirstTag ? '' : " && "
					excludeParameter += "${or}cat != ${it}"
					isFirstTag = false
				}
			}

			def and = Include_Tags != '' && Exclude_Tags != '' ? " && " : ''
			def where = Include_Tags != '' || Exclude_Tags != '' ? "-where" : ''
			def quote = Include_Tags != '' || Exclude_Tags != '' ? "'" : ''
			def doubleQuote = Include_Tags != '' || Exclude_Tags != '' ? "\"" : ''

      print "Including tags:  ${Include_Tags}"
			print "Excluding tags:  ${Exclude_Tags}"


			// Second part of the method executes the tests using Nunit Console
			if (isRemote)
			{
					print "Running tests remotely.."
					bat "C:/Users/Jenkins/ssh.exe -o ServerAliveInterval=30 UIMCM@1.tcp.eu.ngrok.io -p$remotePort \"cd /Users/uimcm/NUnit.Console-3.8.0/ ; bash --login /Users/uimcm/NUnit.Console-3.8.0/nunit ${remotePath}/${projectName}.dll ${where} ${quote}${includeParameter}${and}${excludeParameter}${quote} --result:${device}TestResults.xml;format=nunit2\""
			}
			else
			{
					print "Running tests locally.."
					bat "nunit ${projectName}/bin/${device}/${projectName}.dll --result:${device}TestResults.xml;format=nunit2 --framework:net-4.5 ${where} ${doubleQuote}${includeParameter}${and}${excludeParameter}${doubleQuote}"
			}
}

// Helper method to include tag
def includeTag(tag)
{
	if (Include_Tags != '')
	{
		Include_Tags += ",${tag}"
	}
	else
	{
		Include_Tags = "${tag}"
	}
}

// Helper method to exclude tag
def excludeTag(tag)
{
	if (Exclude_Tags != '')
	{
		Exclude_Tags += ",${tag}"
	}
	else
	{
		Exclude_Tags = "${tag}"
	}
}

// Helper method to generate report summary for Slack
def testReport()
{
	currentLog = currentBuild.rawBuild.log
	testSummary = currentLog.substring(currentLog.indexOf("Test Run Summary"), currentLog.indexOf("Results "))

	OverallResult = (testSummary =~ /(Overall result:) \w+/)[0][0].replace("Overall result: ","");
	TotalTests = (testSummary =~ /(Test Count:) \w+/)[0][0].replace("Test Count: ","");
	Passed = (testSummary =~ /(Passed:) \w+/)[0][0].replace("Passed: ","");
	Failed = (testSummary =~ /(Failed:) \w+/)[0][0].replace("Failed: ","");
	Warnings = (testSummary =~ /(Warnings:) \w+/)[0][0].replace("Warnings: ","");
	Inconclusive = (testSummary =~ /(Inconclusive:) \w+/)[0][0].replace("Inconclusive: ","");
	Skipped = (testSummary =~ /(Skipped:) \w+/)[0][0].replace("Skipped: ","");

	if (Failed == '0' && OverallResult == 'Passed') {
		currentBuild.result = 'SUCCESS'
	} else if (OverallResult == 'Failed') {
		currentBuild.result = 'FAILED'
	} else {
		currentBuild.result = 'UNSTABLE'
	}

	return "Test Report:\n  ${testSummary}"
}

// Helper method to generate Performance tests report summary for Slack (TODO)
def performanceReport()
{
	def message = "Performance report:\n";
	def measurments = (currentBuild.rawBuild.log =~ /Measure.*?(?=-)/);

	for (i = 0; i<measurments.count; i++)
	{
    message += measurments[i];
	}

	return message
}

// Helper method to send report summary to Slack
def sendSlackNotification(testReport, channel)
{
	def buildStatus = currentBuild.result
	def colorSlack
	def emotIcon

	if (buildStatus == 'SUCCESS'){
		colorSlack = '#008000'
		emotIcon = ":smile:"	}
	if (buildStatus == 'UNSTABLE'){
		colorSlack = '#FFB600'
		emotIcon = ":worried:"	}
	if (buildStatus == 'FAILURE'){
		colorSlack = '#FF0000'
		emotIcon = ":cry:"
	}

  def msgPrefix = "@channel"
	def reportLink = "${env.JOB_URL}/${env.BUILD_NUMBER}/cucumber-html-reports/overview-features.html"

  def performanceReportMessage = ""
	if (Include_Tags.contains("Performance"))
	{
		performanceReportMessage = performanceReport()
	}
	def message = "${msgPrefix} ${env.JOB_NAME} execution finished with status *${buildStatus}* ${emotIcon} \n ${performanceReportMessage}\n ${testReport} \n Link to the report: ${reportLink}"

	slackSend(color: colorSlack, message: message, channel: channel)
}

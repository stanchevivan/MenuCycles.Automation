using System;using System.Linq;using MenuCycle.Tests.Models;using MenuCycle.Tests.PageObjects;using NUnit.Framework;using TechTalk.SpecFlow;using TechTalk.SpecFlow.Assist;namespace MenuCycle.Tests.Steps{    [Binding]    public class NutritionSteps    {        readonly PlanningView planningView;        readonly PlanningTabDays planningTabDays;        readonly PlanningTabWeeks planningTabWeeks;        readonly NutritionTabDays nutritionTabDays;        readonly MenuCycleDailyCalendarView menuCycleDailyCalendarView;        readonly RecipeSearch recipeSearch;        readonly ToastNotification notification;        readonly ScenarioContext scenarioContext;        readonly PostProductionTabDays postProductionTabDays;        readonly PostProductionTabWeeks postProductionTabWeeks;        public NutritionSteps(ScenarioContext scenarioContext, PlanningView dailyPlanningView, PlanningTabDays planningTab, PlanningTabWeeks planningTabWeeks, NutritionTabDays nutritionTab, MenuCycleDailyCalendarView menuCycleDailyCalendarView,                                   RecipeSearch recipeSearch, ToastNotification notification, PostProductionTabDays postProductionTabDays, PostProductionTabWeeks postProductionTabWeeks)        {            this.planningView = dailyPlanningView;            this.planningTabDays = planningTab;            this.planningTabWeeks = planningTabWeeks;            this.nutritionTabDays = nutritionTab;            this.menuCycleDailyCalendarView = menuCycleDailyCalendarView;            this.recipeSearch = recipeSearch;            this.notification = notification;            this.postProductionTabDays = postProductionTabDays;            this.postProductionTabWeeks = postProductionTabWeeks;            this.scenarioContext = scenarioContext;        }        [Then(@"Verify all nutrition meal periods are expanded")]        public void VerifyAllNutritionMealPeriodsAreExpanded()        {            Assert.IsTrue(nutritionTabDays.AreAllMealPeriodsExpanded);        }        [Then(@"Verify all nutrition meal periods are collapsed")]        public void VerifyAllNutritionMealPeriodsAreCollapsed()        {            Assert.IsTrue(nutritionTabDays.AreAllMealPeriodsCollapsed);

        }

        [Then(@"Verify nutrition data for recipes are")]        public void ThenVerifyNutritionDataForItemsIs(Table table)        {
            var row = table.Rows[0];

            var recipe = nutritionTabDays.GetMealPeriod(row["MealPeriodName"]).GetRecipe(row["RecipeTitle"]).GetFirstRow();

            Assert.That(recipe.PlannedQuantity, Is.EqualTo(scenarioContext.Get<string>("PlannedQuantity")));
            Assert.That(recipe.MixPercentage, Is.EqualTo(row["MixPercent"]));
            Assert.That(recipe.EnergyKJ, Is.EqualTo(row["EnergyKJ"]));
            Assert.That(recipe.EnergyKCAL, Is.EqualTo(row["EnergyKCAL"]));
            Assert.That(recipe.Fat, Is.EqualTo(row["Fat"]));
            Assert.That(recipe.SaturatesFat, Is.EqualTo(row["SaturatedFat"]));
            Assert.That(recipe.Sugar, Is.EqualTo(row["Sugar"]));
            Assert.That(recipe.Salt, Is.EqualTo(row["Salt"]));
        }

        [When(@"Nutrition meal period ""(.*)"" is collapsed")]        public void WhenNutritionMealPeriodIsCollapsed(string periodName)        {            nutritionTabDays.GetMealPeriod(periodName).Collapse();        }        [When(@"Nutrition meal period ""(.*)"" is expanded")]        public void WhenNutritionMealPeriodIsExpanded(string periodName)        {            nutritionTabDays.GetMealPeriod(periodName).Expand();        }        [Then(@"Verify main data for Meal Period ""(.*)"" is collapsed in Nutrition days")]        public void ThenMainDataForNutritionMealPeriodIsCollapsedInPostProductionDays(string periodName)        {            Assert.IsFalse(nutritionTabDays.GetMealPeriod(periodName).IsExpanded);        }        [Then(@"Verify main data for Meal Period ""(.*)"" is expanded in Nutrition days")]        public void ThenMainDataForNutritionMealPeriodIsExpandedInPostProductionDays(string periodName)        {            Assert.IsTrue(nutritionTabDays.GetMealPeriod(periodName).IsExpanded);        }

        [When(@"Verify all meal periods are expanded in Nutrition screen days")]        [Then(@"Verify all meal periods are expanded in Nutrition screen days")]        public void AllMealPeriodsAreExpandedInNutritionScreenDays()        {            Assert.IsTrue(nutritionTabDays.AreAllMealPeriodsExpanded);        }

        [When(@"Verify all meal periods are collapsed in Nutrition screen days")]        [Then(@"Verify all meal periods are collapsed in Nutrition screen days")]        public void AllMealPeriodsAreCollapsedInNutritionScreenDays()        {            Assert.IsFalse(nutritionTabDays.AreAllMealPeriodsExpanded);        }

        [Then(@"Verify Nutrition Daily Totals are equal to")]        public void ThenNutritionDailyTotalsAreEqualTo(Table table)        {            dynamic values = table.CreateDynamicInstance();            if (!string.IsNullOrEmpty(Convert.ToString(values.PlannedQty)))            {                Assert.That(nutritionTabDays.DailyPlannedQtyTotal, Is.EqualTo(Convert.ToString(values.PlannedQty)));            }            if (!string.IsNullOrEmpty(Convert.ToString(values.EnergyKJ)))            {                Assert.That(nutritionTabDays.DailyEnergyKJTotal, Is.EqualTo(Convert.ToString(values.EnergyKJ)));            }            if (!string.IsNullOrEmpty(Convert.ToString(values.EnergyKCAL)))            {                Assert.That(nutritionTabDays.DailyEnergyKCALTotal, Is.EqualTo(Convert.ToString(values.EnergyKCAL)));            }            if (!string.IsNullOrEmpty(Convert.ToString(values.Fat)))            {                Assert.That(nutritionTabDays.DailyFatTotal, Is.EqualTo(Convert.ToString(values.Fat)));            }
            if (!string.IsNullOrEmpty(Convert.ToString(values.SaturatedFat)))            {                Assert.That(nutritionTabDays.DailySaturatedFatTotal, Is.EqualTo(Convert.ToString(values.SaturatedFat)));            }
            if (!string.IsNullOrEmpty(Convert.ToString(values.Sugar)))            {                Assert.That(nutritionTabDays.DailySugarTotal, Is.EqualTo(Convert.ToString(values.Sugar)));            }
            if (!string.IsNullOrEmpty(Convert.ToString(values.Salt)))            {                Assert.That(nutritionTabDays.DailySaltTotal, Is.EqualTo(Convert.ToString(values.Salt)));            }        }

        [Then(@"Verify Nutritions Meal Period ""(.*)"" Totals are equal to")]        public void ThenVerifyNutritionsMealPeriodTotalsAreEqualTo(string mealPeriod, Table table)        {            var mealPeriodName = nutritionTabDays.GetMealPeriod(mealPeriod);
            dynamic values = table.CreateDynamicInstance();            if (!string.IsNullOrEmpty(Convert.ToString(values.PlannedQty)))            {                Assert.That(mealPeriodName.MealPeriodPlannedQtyTotal, Is.EqualTo(Convert.ToString(values.PlannedQty)));            }            if (!string.IsNullOrEmpty(Convert.ToString(values.EnergyKJ)))            {                Assert.That(mealPeriodName.MealPeriodEnergyKJTotal, Is.EqualTo(Convert.ToString(values.EnergyKJ)));            }            if (!string.IsNullOrEmpty(Convert.ToString(values.EnergyKCAL)))            {                Assert.That(mealPeriodName.MealPeriodEnergyKCALTotal, Is.EqualTo(Convert.ToString(values.EnergyKCAL)));            }            if (!string.IsNullOrEmpty(Convert.ToString(values.Fat)))            {                Assert.That(mealPeriodName.MealPeriodFatTotal, Is.EqualTo(Convert.ToString(values.Fat)));            }            if (!string.IsNullOrEmpty(Convert.ToString(values.SaturatedFat)))            {                Assert.That(mealPeriodName.MealPeriodSaturatedFatTotal, Is.EqualTo(Convert.ToString(values.SaturatedFat)));            }            if (!string.IsNullOrEmpty(Convert.ToString(values.Sugar)))            {                Assert.That(mealPeriodName.MealPeriodSugarTotal, Is.EqualTo(Convert.ToString(values.Sugar)));            }            if (!string.IsNullOrEmpty(Convert.ToString(values.Salt)))            {                Assert.That(mealPeriodName.MealPeriodSaltTotal, Is.EqualTo(Convert.ToString(values.Salt)));            }
        }        [Then(@"number of covers field is not present")]        public void NumberOfCoversFieldIsNotPresent()        {            Assert.IsFalse(nutritionTabDays.IsNumberOfCoversHiddenForAllMealPeriods);
        }
    }}


// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace MenuCycle.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Recipes")]
    public partial class RecipesFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Recipes.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Recipes", "    Recipes feature", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Retrieve recipe information from the API")]
        [NUnit.Framework.CategoryAttribute("TC28829")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.TestCaseAttribute("QAI", "Meda", "Thursday", "DANGELO", "RECIPE", "703Coronation Chicken Sandwich Filling (50g)", "12", "0", "TariffOne", "GP", "5", "20", "0", null, Category="QAI")]
        public virtual void RetrieveRecipeInformationFromTheAPI(string environment, string menuCycle, string day, string mealPeriod, string type, string recipeName, string plannedQuantity, string costPerUnit, string tariffType, string priceModel, string target, string taxPercentage, string sellPrice, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "TC28829",
                    "Smoke"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Retrieve recipe information from the API", @__tags);
#line 5
this.ScenarioSetup(scenarioInfo);
#line 6
    testRunner.Given(string.Format("Menu Cycle app is open on \"{0}\"", environment), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 7
        testRunner.And("a central user is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 8
        testRunner.And(string.Format("Menu Cycle \"{0}\" is selected", menuCycle), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 9
    testRunner.When(string.Format("planning for \"{0}\" is opened", day), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "MealPeriodName",
                        "TYPE",
                        "RecipeTitle",
                        "PlannedQuantity",
                        "CostPerUnit",
                        "TariffType",
                        "PriceModel",
                        "Target",
                        "TaxPercentage",
                        "SellPrice"});
            table1.AddRow(new string[] {
                        "DANGELO",
                        "RECIPE",
                        string.Format("{0}", recipeName),
                        string.Format("{0}", plannedQuantity),
                        string.Format("{0}", costPerUnit),
                        string.Format("{0}", tariffType),
                        string.Format("{0}", priceModel),
                        string.Format("{0}", target),
                        string.Format("{0}", taxPercentage),
                        string.Format("{0}", sellPrice)});
#line 10
    testRunner.Then("Verify data for items is", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("\"Target %\" field is not present and \"Sell Price\" can be edited if \"Price model\" =" +
            " \"Fixed\"")]
        [NUnit.Framework.CategoryAttribute("TC28830")]
        [NUnit.Framework.TestCaseAttribute("QAI", "Meda", "MONDAY", "004Baked Beans_3", "LUNCH", null, Category="QAI")]
        public virtual void TargetFieldIsNotPresentAndSellPriceCanBeEditedIfPriceModelFixed(string environment, string menuCycle, string day, string recipeName, string mealPeriod, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "TC28830"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("\"Target %\" field is not present and \"Sell Price\" can be edited if \"Price model\" =" +
                    " \"Fixed\"", @__tags);
#line 22
this.ScenarioSetup(scenarioInfo);
#line 23
    testRunner.Given(string.Format("Menu Cycle app is open on \"{0}\"", environment), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 24
        testRunner.And("a central user is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 25
        testRunner.And(string.Format("Menu Cycle \"{0}\" is selected", menuCycle), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 26
    testRunner.When(string.Format("planning for \"{0}\" is opened", day), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 27
        testRunner.And(string.Format("Price model for recipe \"{0}\" in meal period \"{1}\" is set to \"Fixed\"", recipeName, mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 28
    testRunner.Then(string.Format("Verify Target % field for recipe \"{0}\" in meal period \"{1}\" is not present", recipeName, mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 29
        testRunner.And(string.Format("Verify Sell Price for recipe \"{0}\" in meal period \"{1}\" is an editable field", recipeName, mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Target GP % has format: float and type: 2 decimals")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("TC29033")]
        [NUnit.Framework.TestCaseAttribute("QAI", "Meda", "MONDAY", "004Baked Beans_3", "LUNCH", null, Category="QAI")]
        public virtual void TargetGPHasFormatFloatAndType2Decimals(string environment, string menuCycle, string day, string recipeName, string mealPeriod, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "TC29033",
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Target GP % has format: float and type: 2 decimals", @__tags);
#line 38
this.ScenarioSetup(scenarioInfo);
#line 39
    testRunner.Given(string.Format("Menu Cycle app is open on \"{0}\"", environment), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 40
        testRunner.And("a central user is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 41
        testRunner.And(string.Format("Menu Cycle \"{0}\" is selected", menuCycle), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 42
    testRunner.When(string.Format("planning for \"{0}\" is opened", day), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 43
        testRunner.And(string.Format("Price model for recipe \"{0}\" in meal period \"{1}\" is set to \"GP\"", recipeName, mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 44
        testRunner.And(string.Format("TargetGP% for recipe named \"{0}\" in meal period \"{1}\" is set to \"2.333333\"", recipeName, mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 45
        testRunner.And("the user focus out", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 46
    testRunner.Then(string.Format("Verify TargetGP% for recipe named \"{0}\" in meal period \"{1}\" is equal to \"2.33\"", recipeName, mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Target Mark up % has format: float and type: 2 decimals")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("TC29034")]
        [NUnit.Framework.TestCaseAttribute("QAI", "Meda", "MONDAY", "004Baked Beans_3", "LUNCH", null, Category="QAI")]
        public virtual void TargetMarkUpHasFormatFloatAndType2Decimals(string environment, string menuCycle, string day, string recipeName, string mealPeriod, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "TC29034",
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Target Mark up % has format: float and type: 2 decimals", @__tags);
#line 54
this.ScenarioSetup(scenarioInfo);
#line 55
    testRunner.Given(string.Format("Menu Cycle app is open on \"{0}\"", environment), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 56
        testRunner.And("a central user is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 57
        testRunner.And(string.Format("Menu Cycle \"{0}\" is selected", menuCycle), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 58
    testRunner.When(string.Format("planning for \"{0}\" is opened", day), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 59
        testRunner.And(string.Format("Price model for recipe \"{0}\" in meal period \"{1}\" is set to \"Markup\"", recipeName, mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 60
        testRunner.And(string.Format("TargetGP% for recipe named \"{0}\" in meal period \"{1}\" is set to \"2.333333\"", recipeName, mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 61
        testRunner.And("the user focus out", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 62
    testRunner.Then(string.Format("Verify TargetGP% for recipe named \"{0}\" in meal period \"{1}\" is equal to \"2.33\"", recipeName, mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Target GP % validations")]
        [NUnit.Framework.CategoryAttribute("TC29035")]
        [NUnit.Framework.TestCaseAttribute("QAI", "Meda", "MONDAY", "004Baked Beans_3", "LUNCH", null, Category="QAI")]
        public virtual void TargetGPValidations(string environment, string menuCycle, string day, string recipeName, string mealPeriod, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "TC29035"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Target GP % validations", @__tags);
#line 70
this.ScenarioSetup(scenarioInfo);
#line 71
    testRunner.Given(string.Format("Menu Cycle app is open on \"{0}\"", environment), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 72
        testRunner.And("a central user is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 73
        testRunner.And(string.Format("Menu Cycle \"{0}\" is selected", menuCycle), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 74
    testRunner.When(string.Format("planning for \"{0}\" is opened", day), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 75
        testRunner.And(string.Format("Price model for recipe \"{0}\" in meal period \"{1}\" is set to \"GP\"", recipeName, mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 76
        testRunner.And(string.Format("TargetGP% for recipe named \"{0}\" in meal period \"{1}\" is set to \"-100\"", recipeName, mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 77
        testRunner.And("the user focus out", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 78
        testRunner.And(string.Format("Verify red border and contextual error message \"Must be -99.99 to 99.99\" is displ" +
                        "ayed for TargetGP field for recipe \"{0}\" in meal period \"LUNCH\"", recipeName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 79
        testRunner.And(string.Format("TargetGP% for recipe named \"{0}\" in meal period \"{1}\" is set to \"1\"", recipeName, mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 80
        testRunner.And(string.Format("TargetGP% for recipe named \"{0}\" in meal period \"{1}\" is set to \"\"", recipeName, mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 81
        testRunner.And("the user focus out", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 82
        testRunner.And(string.Format("Verify red border and contextual error message \"Value is required\" is displayed f" +
                        "or TargetGP field for recipe \"{0}\" in meal period \"LUNCH\"", recipeName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 83
        testRunner.And(string.Format("TargetGP% for recipe named \"{0}\" in meal period \"{1}\" is set to \"7a7\"", recipeName, mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 84
        testRunner.And("the user focus out", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 85
        testRunner.And(string.Format("Verify red border and contextual error message \"Must be number\" is displayed for " +
                        "TargetGP field for recipe \"{0}\" in meal period \"LUNCH\"", recipeName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 86
        testRunner.And(string.Format("TargetGP% for recipe named \"{0}\" in meal period \"{1}\" is set to \"-99.99\"", recipeName, mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 87
        testRunner.And("the user focus out", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 88
        testRunner.And(string.Format("Verify red border is not displayed around Target% for recipe \"004Baked Beans_3\" i" +
                        "n meal period \"{0}\"", mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 89
        testRunner.And(string.Format("TargetGP% for recipe named \"{0}\" in meal period \"{1}\" is set to \"99.99\"", recipeName, mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 90
        testRunner.And("the user focus out", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 91
    testRunner.Then(string.Format("Verify red border is not displayed around Target% for recipe \"{0}\" in meal period" +
                        " \"{1}\"", recipeName, mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Target Markup % validations")]
        [NUnit.Framework.CategoryAttribute("TC29036")]
        [NUnit.Framework.TestCaseAttribute("QAI", "Meda", "MONDAY", "004Baked Beans_3", "LUNCH", null, Category="QAI")]
        public virtual void TargetMarkupValidations(string environment, string menuCycle, string day, string recipeName, string mealPeriod, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "TC29036"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Target Markup % validations", @__tags);
#line 99
this.ScenarioSetup(scenarioInfo);
#line 100
    testRunner.Given(string.Format("Menu Cycle app is open on \"{0}\"", environment), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 101
        testRunner.And("a central user is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 102
        testRunner.And(string.Format("Menu Cycle \"{0}\" is selected", menuCycle), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 103
    testRunner.When(string.Format("planning for \"{0}\" is opened", day), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 104
        testRunner.And(string.Format("Price model for recipe \"{0}\" in meal period \"{1}\" is set to \"Markup\"", recipeName, mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 105
        testRunner.And(string.Format("TargetGP% for recipe named \"{0}\" in meal period \"{1}\" is set to \"5\"", recipeName, mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 106
        testRunner.And(string.Format("TargetGP% for recipe named \"{0}\" in meal period \"{1}\" is set to \"\"", recipeName, mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 107
        testRunner.And("the user focus out", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 108
        testRunner.And(string.Format("Verify red border and contextual error message \"Value is required\" is displayed f" +
                        "or TargetGP field for recipe \"{0}\" in meal period \"{1}\"", recipeName, mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 109
        testRunner.And(string.Format("TargetGP% for recipe named \"{0}\" in meal period \"{1}\" is set to \"-1\"", recipeName, mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 110
        testRunner.And("the user focus out", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 111
        testRunner.And(string.Format("Verify red border and contextual error message \"Must be 0 or greater\" is displaye" +
                        "d for TargetGP field for recipe \"{0}\" in meal period \"{1}\"", recipeName, mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 112
        testRunner.And(string.Format("TargetGP% for recipe named \"{0}\" in meal period \"{1}\" is set to \"7a7\"", recipeName, mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 113
        testRunner.And("the user focus out", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 114
        testRunner.And(string.Format("Verify red border and contextual error message \"Must be number\" is displayed for " +
                        "TargetGP field for recipe \"{0}\" in meal period \"{1}\"", recipeName, mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 115
        testRunner.And(string.Format("TargetGP% for recipe named \"{0}\" in meal period \"{1}\" is set to \"0\"", recipeName, mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 116
        testRunner.And("the user focus out", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 117
        testRunner.And(string.Format("Verify red border is not displayed around Target% for recipe \"{0}\" in meal period" +
                        " \"{1}\"", recipeName, mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 118
        testRunner.And(string.Format("TargetGP% for recipe named \"{0}\" in meal period \"{1}\" is set to \"2134\"", recipeName, mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 119
        testRunner.And("the user focus out", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 120
    testRunner.Then(string.Format("Verify red border is not displayed around Target% for recipe \"{0}\" in meal period" +
                        " \"{1}\"", recipeName, mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Sell price validations")]
        [NUnit.Framework.CategoryAttribute("TC29039")]
        [NUnit.Framework.TestCaseAttribute("QAI", "Meda", "MONDAY", "004Baked Beans_3", "LUNCH", null, Category="QAI")]
        public virtual void SellPriceValidations(string environment, string menuCycle, string day, string recipeName, string mealPeriod, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "TC29039"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sell price validations", @__tags);
#line 128
this.ScenarioSetup(scenarioInfo);
#line 129
    testRunner.Given(string.Format("Menu Cycle app is open on \"{0}\"", environment), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 130
        testRunner.And("a central user is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 131
        testRunner.And(string.Format("Menu Cycle \"{0}\" is selected", menuCycle), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 132
    testRunner.When(string.Format("planning for \"{0}\" is opened", day), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 133
        testRunner.And(string.Format("Price model for recipe \"{0}\" in meal period \"{1}\" is set to \"Fixed\"", recipeName, mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 134
        testRunner.And(string.Format("SellPrice for recipe named \"{0}\" in meal period \"{1}\" is set to \"5\"", recipeName, mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 135
        testRunner.And(string.Format("SellPrice for recipe named \"{0}\" in meal period \"{1}\" is set to \"\"", recipeName, mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 136
        testRunner.And("the user focus out", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 137
        testRunner.And(string.Format("Verify red border and contextual error message \"Value is required\" is displayed f" +
                        "or Sell Price field for recipe \"{0}\" in meal period \"{1}\"", recipeName, mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 138
        testRunner.And(string.Format("SellPrice for recipe named \"{0}\" in meal period \"{1}\" is set to \"-1\"", recipeName, mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 139
        testRunner.And("the user focus out", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 140
        testRunner.And(string.Format("Verify red border and contextual error message \"Must be 0 or greater\" is displaye" +
                        "d for Sell Price field for recipe \"{0}\" in meal period \"{1}\"", recipeName, mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 141
        testRunner.And(string.Format("SellPrice for recipe named \"{0}\" in meal period \"{1}\" is set to \"7a7\"", recipeName, mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 142
        testRunner.And("the user focus out", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 143
        testRunner.And(string.Format("Verify red border and contextual error message \"Must be number\" is displayed for " +
                        "Sell Price field for recipe \"{0}\" in meal period \"{1}\"", recipeName, mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 144
        testRunner.And(string.Format("SellPrice for recipe named \"{0}\" in meal period \"{1}\" is set to \"0\"", recipeName, mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 145
        testRunner.And("the user focus out", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 146
        testRunner.And(string.Format("Verify red border is not displayed around Sell Price for recipe \"{0}\" in meal per" +
                        "iod \"{1}\"", recipeName, mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 147
        testRunner.And(string.Format("SellPrice for recipe named \"{0}\" in meal period \"{1}\" is set to \"4322\"", recipeName, mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 148
        testRunner.And("the user focus out", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 149
    testRunner.Then(string.Format("Verify red border is not displayed around Sell Price for recipe \"{0}\" in meal per" +
                        "iod \"{1}\"", recipeName, mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Retrieve Recipe Price from the API (NO Min - Max)")]
        [NUnit.Framework.CategoryAttribute("TC28899")]
        [NUnit.Framework.TestCaseAttribute("QAI", "Meda", "MONDAY", "004Baked Beans_3", "LUNCH", null, Category="QAI")]
        public virtual void RetrieveRecipePriceFromTheAPINOMin_Max(string environment, string menuCycle, string day, string recipeName, string mealPeriod, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "TC28899"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Retrieve Recipe Price from the API (NO Min - Max)", @__tags);
#line 157
this.ScenarioSetup(scenarioInfo);
#line 158
    testRunner.Given(string.Format("Menu Cycle app is open on \"{0}\"", environment), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 159
        testRunner.And("a central user is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 160
        testRunner.And(string.Format("Menu Cycle \"{0}\" is selected", menuCycle), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 161
    testRunner.When(string.Format("planning for \"{0}\" is opened", day), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 162
    testRunner.Then(string.Format("Verify CostPerUnit for recipe named \"{0}\" in meal period \"{1}\" is equal to \"1.84\"" +
                        "", recipeName, mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calculations for \"Total Cost\", \"Sell Price\", \"Revenue\" and \"Actual GP\" should be " +
            "correct")]
        [NUnit.Framework.CategoryAttribute("TC27705")]
        [NUnit.Framework.CategoryAttribute("TC27721")]
        [NUnit.Framework.CategoryAttribute("TC27724")]
        [NUnit.Framework.CategoryAttribute("TC27726")]
        [NUnit.Framework.TestCaseAttribute("QAI", "Meda", "WEDNESDAY", null, Category="QAI")]
        public virtual void CalculationsForTotalCostSellPriceRevenueAndActualGPShouldBeCorrect(string environment, string menuCycle, string day, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "TC27705",
                    "TC27721",
                    "TC27724",
                    "TC27726"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculations for \"Total Cost\", \"Sell Price\", \"Revenue\" and \"Actual GP\" should be " +
                    "correct", @__tags);
#line 170
this.ScenarioSetup(scenarioInfo);
#line 171
    testRunner.Given(string.Format("Menu Cycle app is open on \"{0}\"", environment), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 172
        testRunner.And("a central user is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 173
        testRunner.And(string.Format("Menu Cycle \"{0}\" is selected", menuCycle), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 174
        testRunner.And(string.Format("planning for \"{0}\" is opened", day), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "RecipeTitle",
                        "PlannedQuantity",
                        "PriceModel",
                        "Target",
                        "TaxPercentage",
                        "SellPrice"});
            table2.AddRow(new string[] {
                        "004Bread (fresh dough)",
                        "2",
                        "Fixed",
                        "^",
                        "20",
                        "55"});
            table2.AddRow(new string[] {
                        "724Pepper & Garlic Coated Beef",
                        "3",
                        "GP",
                        "5",
                        "5",
                        "^"});
#line 175
    testRunner.When("data for recipes in a la carte \"Holiday A La Carte\" in meal period \"LANCE\" is set" +
                    "", ((string)(null)), table2, "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "MealPeriodName",
                        "TYPE",
                        "RecipeTitle",
                        "PlannedQuantity",
                        "TariffType",
                        "PriceModel",
                        "Target",
                        "TaxPercentage"});
            table3.AddRow(new string[] {
                        "LANCE",
                        "RECIPE",
                        "004Basic Sponge",
                        "4",
                        "TariffOne",
                        "Markup",
                        "15",
                        "0"});
#line 179
    testRunner.And("data for recipes is set", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "RecipeTitle",
                        "CostPerUnit",
                        "TotalCosts",
                        "SellPrice",
                        "Revenue",
                        "ActualGP"});
            table4.AddRow(new string[] {
                        "004Bread (fresh dough)",
                        "0.1",
                        "0.2",
                        "^",
                        "91.67",
                        "100%"});
            table4.AddRow(new string[] {
                        "724Pepper & Garlic Coated Beef",
                        "2378.9",
                        "7136.7",
                        "2629.31",
                        "7512.32",
                        "5%"});
#line 182
    testRunner.Then("Verify data for recipes in a la carte \"Holiday A La Carte\" in meal period \"LANCE\"" +
                    " is", ((string)(null)), table4, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "MealPeriodName",
                        "TYPE",
                        "RecipeTitle",
                        "TotalCosts",
                        "SellPrice",
                        "Revenue",
                        "ActualGP"});
            table5.AddRow(new string[] {
                        "LANCE",
                        "RECIPE",
                        "004Basic Sponge",
                        "2.52",
                        "0.72",
                        "2.9",
                        "13%"});
#line 186
    testRunner.And("Verify data for items is", ((string)(null)), table5, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Planned Quantity validations")]
        [NUnit.Framework.CategoryAttribute("TC29101")]
        [NUnit.Framework.CategoryAttribute("D23785")]
        [NUnit.Framework.TestCaseAttribute("QAI", "Meda", "MONDAY", "004Baked Beans_3", "LUNCH", null, Category="QAI")]
        public virtual void PlannedQuantityValidations(string environment, string menuCycle, string day, string recipeName, string mealPeriod, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "TC29101",
                    "D23785"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Planned Quantity validations", @__tags);
#line 196
this.ScenarioSetup(scenarioInfo);
#line 197
    testRunner.Given(string.Format("Menu Cycle app is open on \"{0}\"", environment), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 198
        testRunner.And("a central user is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 199
        testRunner.And(string.Format("Menu Cycle \"{0}\" is selected", menuCycle), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 200
        testRunner.And(string.Format("planning for \"{0}\" is opened", day), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 201
    testRunner.When(string.Format("quantity for recipe named \"{0}\" in meal period \"{1}\" is set to \"5\"", recipeName, mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 202
        testRunner.And(string.Format("quantity for recipe named \"{0}\" in meal period \"{1}\" is set to \"\"", recipeName, mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 203
        testRunner.And("the user focus out", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 204
        testRunner.And(string.Format("Verify red border and contextual error message \"Value is required\" is displayed f" +
                        "or Planned Quantity field for recipe \"{0}\" in meal period \"{1}\"", recipeName, mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 205
        testRunner.And(string.Format("quantity for recipe named \"{0}\" in meal period \"{1}\" is set to \"-1\"", recipeName, mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 206
        testRunner.And("the user focus out", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 207
        testRunner.And(string.Format("Verify red border and contextual error message \"Must be 0 or greater\" is displaye" +
                        "d for Planned Quantity field for recipe \"{0}\" in meal period \"{1}\"", recipeName, mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 208
        testRunner.And(string.Format("quantity for recipe named \"{0}\" in meal period \"{1}\" is set to \"7a7\"", recipeName, mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 209
        testRunner.And("the user focus out", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 210
        testRunner.And(string.Format("Verify red border and contextual error message \"Must be integer\" is displayed for" +
                        " Planned Quantity field for recipe \"{0}\" in meal period \"{1}\"", recipeName, mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 211
        testRunner.And(string.Format("quantity for recipe named \"{0}\" in meal period \"{1}\" is set to \"0\"", recipeName, mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 212
        testRunner.And("the user focus out", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 213
    testRunner.Then(string.Format("Verify red border is not displayed around Planned Quantity for recipe \"{0}\" in me" +
                        "al period \"{1}\"", recipeName, mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Transferring Sell Price value to Markup and GP Target% field does not happen")]
        [NUnit.Framework.CategoryAttribute("TC29394")]
        [NUnit.Framework.CategoryAttribute("D23825")]
        [NUnit.Framework.TestCaseAttribute("QAI", "Meda", "MONDAY", "004Baked Beans_3", "LUNCH", null, Category="QAI")]
        public virtual void TransferringSellPriceValueToMarkupAndGPTargetFieldDoesNotHappen(string environment, string menuCycle, string day, string recipeName, string mealPeriod, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "TC29394",
                    "D23825"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Transferring Sell Price value to Markup and GP Target% field does not happen", @__tags);
#line 221
this.ScenarioSetup(scenarioInfo);
#line 222
    testRunner.Given(string.Format("Menu Cycle app is open on \"{0}\"", environment), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 223
        testRunner.And("a central user is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 224
        testRunner.And(string.Format("Menu Cycle \"{0}\" is selected", menuCycle), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 225
        testRunner.And(string.Format("planning for \"{0}\" is opened", day), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "MealPeriodName",
                        "TYPE",
                        "RecipeTitle",
                        "PriceModel",
                        "Target",
                        "SellPrice"});
            table6.AddRow(new string[] {
                        string.Format("{0}", mealPeriod),
                        "RECIPE",
                        string.Format("{0}", recipeName),
                        "GP",
                        "",
                        "^"});
            table6.AddRow(new string[] {
                        string.Format("{0}", mealPeriod),
                        "RECIPE",
                        string.Format("{0}", recipeName),
                        "Markup",
                        "",
                        "^"});
            table6.AddRow(new string[] {
                        string.Format("{0}", mealPeriod),
                        "RECIPE",
                        string.Format("{0}", recipeName),
                        "Fixed",
                        "^",
                        "50"});
            table6.AddRow(new string[] {
                        string.Format("{0}", mealPeriod),
                        "RECIPE",
                        string.Format("{0}", recipeName),
                        "GP",
                        "^",
                        "^"});
#line 226
    testRunner.When("data for recipes is set", ((string)(null)), table6, "When ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "MealPeriodName",
                        "TYPE",
                        "RecipeTitle",
                        "Target"});
            table7.AddRow(new string[] {
                        string.Format("{0}", mealPeriod),
                        "RECIPE",
                        string.Format("{0}", recipeName),
                        ""});
#line 232
    testRunner.And("Verify data for items is", ((string)(null)), table7, "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "MealPeriodName",
                        "TYPE",
                        "RecipeTitle",
                        "PriceModel"});
            table8.AddRow(new string[] {
                        string.Format("{0}", mealPeriod),
                        "RECIPE",
                        string.Format("{0}", recipeName),
                        "Markup"});
#line 235
    testRunner.And("data for recipes is set", ((string)(null)), table8, "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "MealPeriodName",
                        "TYPE",
                        "RecipeTitle",
                        "Target"});
            table9.AddRow(new string[] {
                        string.Format("{0}", mealPeriod),
                        "RECIPE",
                        string.Format("{0}", recipeName),
                        ""});
#line 238
    testRunner.Then("Verify data for items is", ((string)(null)), table9, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Transferring Markup Target% value to Sell Price and GP target field does not happ" +
            "en")]
        [NUnit.Framework.CategoryAttribute("TC29395")]
        [NUnit.Framework.CategoryAttribute("D23825")]
        [NUnit.Framework.TestCaseAttribute("QAI", "Meda", "MONDAY", "004Baked Beans_3", "LUNCH", null, Category="QAI")]
        public virtual void TransferringMarkupTargetValueToSellPriceAndGPTargetFieldDoesNotHappen(string environment, string menuCycle, string day, string recipeName, string mealPeriod, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "TC29395",
                    "D23825"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Transferring Markup Target% value to Sell Price and GP target field does not happ" +
                    "en", @__tags);
#line 248
this.ScenarioSetup(scenarioInfo);
#line 249
    testRunner.Given(string.Format("Menu Cycle app is open on \"{0}\"", environment), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 250
        testRunner.And("a central user is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 251
        testRunner.And(string.Format("Menu Cycle \"{0}\" is selected", menuCycle), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 252
        testRunner.And(string.Format("planning for \"{0}\" is opened", day), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "MealPeriodName",
                        "TYPE",
                        "RecipeTitle",
                        "PriceModel",
                        "Target",
                        "SellPrice"});
            table10.AddRow(new string[] {
                        string.Format("{0}", mealPeriod),
                        "RECIPE",
                        string.Format("{0}", recipeName),
                        "GP",
                        "",
                        "^"});
            table10.AddRow(new string[] {
                        string.Format("{0}", mealPeriod),
                        "RECIPE",
                        string.Format("{0}", recipeName),
                        "Fixed",
                        "^",
                        ""});
            table10.AddRow(new string[] {
                        string.Format("{0}", mealPeriod),
                        "RECIPE",
                        string.Format("{0}", recipeName),
                        "Markup",
                        "50",
                        "^"});
            table10.AddRow(new string[] {
                        string.Format("{0}", mealPeriod),
                        "RECIPE",
                        string.Format("{0}", recipeName),
                        "GP",
                        "^",
                        "^"});
#line 253
    testRunner.When("data for recipes is set", ((string)(null)), table10, "When ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "MealPeriodName",
                        "TYPE",
                        "RecipeTitle",
                        "Target"});
            table11.AddRow(new string[] {
                        string.Format("{0}", mealPeriod),
                        "RECIPE",
                        string.Format("{0}", recipeName),
                        ""});
#line 259
    testRunner.And("Verify data for items is", ((string)(null)), table11, "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "MealPeriodName",
                        "TYPE",
                        "RecipeTitle",
                        "PriceModel"});
            table12.AddRow(new string[] {
                        string.Format("{0}", mealPeriod),
                        "RECIPE",
                        string.Format("{0}", recipeName),
                        "Fixed"});
#line 262
    testRunner.And("data for recipes is set", ((string)(null)), table12, "And ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "MealPeriodName",
                        "TYPE",
                        "RecipeTitle",
                        "SellPrice"});
            table13.AddRow(new string[] {
                        string.Format("{0}", mealPeriod),
                        "RECIPE",
                        string.Format("{0}", recipeName),
                        ""});
#line 265
    testRunner.Then("Verify data for items is", ((string)(null)), table13, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Transferring GP Target% value to Sell Price and Markup target field does not happ" +
            "en")]
        [NUnit.Framework.CategoryAttribute("TC29469")]
        [NUnit.Framework.CategoryAttribute("D23825")]
        [NUnit.Framework.TestCaseAttribute("QAI", "Meda", "MONDAY", "004Baked Beans_3", "LUNCH", null, Category="QAI")]
        public virtual void TransferringGPTargetValueToSellPriceAndMarkupTargetFieldDoesNotHappen(string environment, string menuCycle, string day, string recipeName, string mealPeriod, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "TC29469",
                    "D23825"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Transferring GP Target% value to Sell Price and Markup target field does not happ" +
                    "en", @__tags);
#line 275
this.ScenarioSetup(scenarioInfo);
#line 276
    testRunner.Given(string.Format("Menu Cycle app is open on \"{0}\"", environment), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 277
        testRunner.And("a central user is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 278
        testRunner.And(string.Format("Menu Cycle \"{0}\" is selected", menuCycle), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 279
        testRunner.And(string.Format("planning for \"{0}\" is opened", day), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "MealPeriodName",
                        "TYPE",
                        "RecipeTitle",
                        "PriceModel",
                        "Target",
                        "SellPrice"});
            table14.AddRow(new string[] {
                        string.Format("{0}", mealPeriod),
                        "RECIPE",
                        string.Format("{0}", recipeName),
                        "Fixed",
                        "^",
                        ""});
            table14.AddRow(new string[] {
                        string.Format("{0}", mealPeriod),
                        "RECIPE",
                        string.Format("{0}", recipeName),
                        "Markup",
                        "",
                        "^"});
            table14.AddRow(new string[] {
                        string.Format("{0}", mealPeriod),
                        "RECIPE",
                        string.Format("{0}", recipeName),
                        "GP",
                        "50",
                        "^"});
            table14.AddRow(new string[] {
                        string.Format("{0}", mealPeriod),
                        "RECIPE",
                        string.Format("{0}", recipeName),
                        "Markup",
                        "^",
                        "^"});
#line 280
    testRunner.When("data for recipes is set", ((string)(null)), table14, "When ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "MealPeriodName",
                        "TYPE",
                        "RecipeTitle",
                        "Target"});
            table15.AddRow(new string[] {
                        string.Format("{0}", mealPeriod),
                        "RECIPE",
                        string.Format("{0}", recipeName),
                        ""});
#line 286
    testRunner.And("Verify data for items is", ((string)(null)), table15, "And ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "MealPeriodName",
                        "TYPE",
                        "RecipeTitle",
                        "PriceModel"});
            table16.AddRow(new string[] {
                        string.Format("{0}", mealPeriod),
                        "RECIPE",
                        string.Format("{0}", recipeName),
                        "Fixed"});
#line 289
    testRunner.And("data for recipes is set", ((string)(null)), table16, "And ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "MealPeriodName",
                        "TYPE",
                        "RecipeTitle",
                        "SellPrice"});
            table17.AddRow(new string[] {
                        string.Format("{0}", mealPeriod),
                        "RECIPE",
                        string.Format("{0}", recipeName),
                        ""});
#line 292
    testRunner.Then("Verify data for items is", ((string)(null)), table17, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Error message displayed if recipe values are empty")]
        [NUnit.Framework.CategoryAttribute("TC29468")]
        [NUnit.Framework.CategoryAttribute("D23967")]
        [NUnit.Framework.CategoryAttribute("D24183")]
        [NUnit.Framework.CategoryAttribute("D23194")]
        [NUnit.Framework.TestCaseAttribute("QAI", "Meda", "MONDAY", "004Baked Beans_3", "LUNCH", null, Category="QAI")]
        public virtual void ErrorMessageDisplayedIfRecipeValuesAreEmpty(string environment, string menuCycle, string day, string recipeName, string mealPeriod, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "TC29468",
                    "D23967",
                    "D24183",
                    "D23194"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error message displayed if recipe values are empty", @__tags);
#line 302
this.ScenarioSetup(scenarioInfo);
#line 303
    testRunner.Given(string.Format("Menu Cycle app is open on \"{0}\"", environment), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 304
        testRunner.And("a central user is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 305
        testRunner.And(string.Format("Menu Cycle \"{0}\" is selected", menuCycle), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 306
        testRunner.And(string.Format("planning for \"{0}\" is opened", day), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 307
    testRunner.When(string.Format("quantity for recipe named \"{0}\" in meal period \"{1}\" is set to \"\"", recipeName, mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 308
        testRunner.And(string.Format("Verify red border is displayed around Planned Quantity for recipe \"{0}\" in meal p" +
                        "eriod \"{1}\"", recipeName, mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 309
        testRunner.And("Save button is clicked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 310
    testRunner.Then("Verify notification message \"Sorry, we could not proceed with your request\" is di" +
                    "splayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Collapsing meal period does no return previous value")]
        [NUnit.Framework.CategoryAttribute("TC29716")]
        [NUnit.Framework.CategoryAttribute("D24183")]
        [NUnit.Framework.TestCaseAttribute("QAI", "Meda", "Thursday", "703Reggae Raggae Mayonnaise", "DANGELO", null, Category="QAI")]
        public virtual void CollapsingMealPeriodDoesNoReturnPreviousValue(string environment, string menuCycle, string day, string recipeName, string mealPeriod, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "TC29716",
                    "D24183"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Collapsing meal period does no return previous value", @__tags);
#line 318
this.ScenarioSetup(scenarioInfo);
#line 319
    testRunner.Given(string.Format("Menu Cycle app is open on \"{0}\"", environment), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 320
        testRunner.And("a central user is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 321
        testRunner.And(string.Format("Menu Cycle \"{0}\" is selected", menuCycle), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 322
        testRunner.And(string.Format("planning for \"{0}\" is opened", day), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "MealPeriodName",
                        "TYPE",
                        "RecipeTitle",
                        "PlannedQuantity"});
            table18.AddRow(new string[] {
                        string.Format("{0}", mealPeriod),
                        "RECIPE",
                        string.Format("{0}", recipeName),
                        ""});
#line 323
    testRunner.When("data for recipes is set", ((string)(null)), table18, "When ");
#line 326
        testRunner.And(string.Format("Meal Period \"{0}\" is collapsed", mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 327
        testRunner.And(string.Format("Meal Period \"{0}\" is expanded", mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "MealPeriodName",
                        "TYPE",
                        "RecipeTitle",
                        "PlannedQuantity"});
            table19.AddRow(new string[] {
                        string.Format("{0}", mealPeriod),
                        "RECIPE",
                        string.Format("{0}", recipeName),
                        ""});
#line 328
    testRunner.Then("Verify data for items is", ((string)(null)), table19, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Meal period totals are re-calculated when the data from the input field is cleare" +
            "d")]
        [NUnit.Framework.CategoryAttribute("TC29735")]
        [NUnit.Framework.CategoryAttribute("D24183")]
        [NUnit.Framework.TestCaseAttribute("QAI", "Meda", "DANGELO", "Thursday", "703Coronation Chicken Sandwich Filling (50g)", "703Reggae Raggae Mayonnaise", null, Category="QAI")]
        public virtual void MealPeriodTotalsAreRe_CalculatedWhenTheDataFromTheInputFieldIsCleared(string environment, string menuCycle, string mealPeriod, string day, string recipeName1, string recipeName2, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "TC29735",
                    "D24183"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Meal period totals are re-calculated when the data from the input field is cleare" +
                    "d", @__tags);
#line 339
this.ScenarioSetup(scenarioInfo);
#line 340
    testRunner.Given(string.Format("Menu Cycle app is open on \"{0}\"", environment), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 341
        testRunner.And("a central user is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 342
        testRunner.And(string.Format("Menu Cycle \"{0}\" is selected", menuCycle), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 343
        testRunner.And(string.Format("planning for \"{0}\" is opened", day), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "MealPeriodName",
                        "TYPE",
                        "RecipeTitle",
                        "PriceModel",
                        "Target",
                        "SellPrice",
                        "TaxPercentage",
                        "PlannedQuantity"});
            table20.AddRow(new string[] {
                        string.Format("{0}", mealPeriod),
                        "RECIPE",
                        string.Format("{0}", recipeName1),
                        "GP",
                        "10",
                        "^",
                        "20",
                        "3"});
            table20.AddRow(new string[] {
                        string.Format("{0}", mealPeriod),
                        "RECIPE",
                        string.Format("{0}", recipeName2),
                        "Fixed",
                        "^",
                        "2",
                        "20",
                        "4"});
#line 344
    testRunner.When("data for recipes is set", ((string)(null)), table20, "When ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "MealPeriodName",
                        "TYPE",
                        "RecipeTitle",
                        "PlannedQuantity"});
            table21.AddRow(new string[] {
                        string.Format("{0}", mealPeriod),
                        "RECIPE",
                        string.Format("{0}", recipeName1),
                        ""});
#line 348
    testRunner.And("data for recipes is set", ((string)(null)), table21, "And ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "PlannedQty",
                        "TotalCost",
                        "Revenue",
                        "ActualGP"});
            table22.AddRow(new string[] {
                        "4",
                        "0",
                        "6.67",
                        "100%"});
#line 351
    testRunner.Then(string.Format("Verify value for fields for meal period \"{0}\" is", mealPeriod), ((string)(null)), table22, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Mass recipe update")]
        [NUnit.Framework.CategoryAttribute("TC29853")]
        [NUnit.Framework.TestCaseAttribute("QAI", "Meda", "004Baked Beans_3", "MONDAY", "LUNCH", "FRIDAY", "DANGELO", null, Category="QAI")]
        public virtual void MassRecipeUpdate(string environment, string menuCycle, string recipeName, string day1, string mealPeriod1, string day2, string mealPeriod2, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "TC29853"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Mass recipe update", @__tags);
#line 361
this.ScenarioSetup(scenarioInfo);
#line 362
    testRunner.Given(string.Format("Menu Cycle app is open on \"{0}\"", environment), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 363
        testRunner.And("a central user is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 364
        testRunner.And(string.Format("Menu Cycle \"{0}\" is selected", menuCycle), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 365
        testRunner.And(string.Format("planning for \"{0}\" is opened", day1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "MealPeriodName",
                        "TYPE",
                        "RecipeTitle",
                        "PriceModel",
                        "TariffType",
                        "SellPrice"});
            table23.AddRow(new string[] {
                        string.Format("{0}", mealPeriod1),
                        "RECIPE",
                        string.Format("{0}", recipeName),
                        "Fixed",
                        "TariffOne",
                        "0#99"});
#line 366
    testRunner.When("data for recipes is set", ((string)(null)), table23, "When ");
#line 369
    testRunner.And(string.Format("\"SellPrice\" is saved in context for recipe \"{0}\" in meal period \"{1}\"", recipeName, mealPeriod1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 370
        testRunner.And("Save button is clicked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 371
        testRunner.And(string.Format("Update prices button is clicked for recipe \"{0}\" in meal period \"{1}\"", recipeName, mealPeriod1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 372
    testRunner.And("Verify Future recipe instances count is 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 373
        testRunner.And("Confirm is selected on the Update Prices dialog", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 374
        testRunner.And("Cancel button is clicked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 375
        testRunner.And(string.Format("planning for \"{0}\" is opened", day2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 376
    testRunner.Then(string.Format("Verify \"SellPrice\" is equal to the value saved in context for recipe \"{0}\" in mea" +
                        "l period \"{1}\"", recipeName, mealPeriod2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Tariff types are discarded when cancel button is clicked")]
        [NUnit.Framework.CategoryAttribute("TC29933")]
        [NUnit.Framework.CategoryAttribute("D24491")]
        [NUnit.Framework.TestCaseAttribute("QAI", "Meda", "MONDAY", "004Baked Beans_3", "LUNCH", null, Category="QAI")]
        public virtual void TariffTypesAreDiscardedWhenCancelButtonIsClicked(string environment, string menuCycle, string day, string recipeName, string mealPeriod, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "TC29933",
                    "D24491"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Tariff types are discarded when cancel button is clicked", @__tags);
#line 384
this.ScenarioSetup(scenarioInfo);
#line 385
    testRunner.Given(string.Format("Menu Cycle app is open on \"{0}\"", environment), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 386
        testRunner.And("a central user is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 387
        testRunner.And(string.Format("Menu Cycle \"{0}\" is selected", menuCycle), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 388
        testRunner.And(string.Format("planning for \"{0}\" is opened", day), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 389
    testRunner.When(string.Format("Add type is clicked for recipe \"{0}\" in meal period \"{1}\"", recipeName, mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 390
    testRunner.And("Cancel button is clicked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 391
        testRunner.And("Confirm is selected on unsaved changes dialog", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 392
        testRunner.And("Wait for Calendar view", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 393
        testRunner.And(string.Format("planning for \"{0}\" is opened", day), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "TariffType"});
            table24.AddRow(new string[] {
                        "TariffOne"});
#line 394
    testRunner.Then(string.Format("Verify existing types for recipe \"{0}\" in meal period \"{1}\" are", recipeName, mealPeriod), ((string)(null)), table24, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete icon appears when adding type")]
        [NUnit.Framework.CategoryAttribute("TC29942")]
        [NUnit.Framework.CategoryAttribute("D24490")]
        [NUnit.Framework.TestCaseAttribute("QAI", "Meda", "MONDAY", "004Baked Beans_3", "LUNCH", null, Category="QAI")]
        public virtual void DeleteIconAppearsWhenAddingType(string environment, string menuCycle, string day, string recipeName, string mealPeriod, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "TC29942",
                    "D24490"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete icon appears when adding type", @__tags);
#line 404
this.ScenarioSetup(scenarioInfo);
#line 405
    testRunner.Given(string.Format("Menu Cycle app is open on \"{0}\"", environment), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 406
        testRunner.And("a central user is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 407
        testRunner.And(string.Format("Menu Cycle \"{0}\" is selected", menuCycle), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 408
        testRunner.And(string.Format("planning for \"{0}\" is opened", day), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "MealPeriodName",
                        "TYPE",
                        "RecipeTitle",
                        "TariffType"});
            table25.AddRow(new string[] {
                        string.Format("{0}", mealPeriod),
                        "RECIPE",
                        string.Format("{0}", recipeName),
                        "TariffTwo"});
#line 409
    testRunner.When("data for recipes is set", ((string)(null)), table25, "When ");
#line 412
        testRunner.And(string.Format("Add type is clicked for recipe \"{0}\" in meal period \"{1}\"", recipeName, mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 413
    testRunner.Then(string.Format("Verify delete icon is present for recipe \"{0}\" in meal period \"{1}\" tariff type \"" +
                        "TariffOne\"", recipeName, mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Opening planning screen multiple times does not add data to unsaved items")]
        [NUnit.Framework.CategoryAttribute("TC29950")]
        [NUnit.Framework.CategoryAttribute("D24575")]
        [NUnit.Framework.TestCaseAttribute("QAI", "Meda", "TUESDAY", "703Houmus Sandwich Filling (50g)", "DINNER", null, Category="QAI")]
        public virtual void OpeningPlanningScreenMultipleTimesDoesNotAddDataToUnsavedItems(string environment, string menuCycle, string day, string recipeName, string mealPeriod, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "TC29950",
                    "D24575"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Opening planning screen multiple times does not add data to unsaved items", @__tags);
#line 421
this.ScenarioSetup(scenarioInfo);
#line 422
    testRunner.Given(string.Format("Menu Cycle app is open on \"{0}\"", environment), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 423
        testRunner.And("a central user is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 424
        testRunner.And(string.Format("Menu Cycle \"{0}\" is selected", menuCycle), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 425
        testRunner.And(string.Format("planning for \"{0}\" is opened", day), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 426
    testRunner.When(string.Format("Meal Period \"{0}\" is expanded", mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 427
        testRunner.And(string.Format("types are saved in context for recipe \"{0}\" in meal period \"{1}\"", recipeName, mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 428
        testRunner.And("Cancel button is clicked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 429
        testRunner.And(string.Format("planning for \"{0}\" is opened", day), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 430
        testRunner.And(string.Format("Meal Period \"{0}\" is expanded", mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 431
    testRunner.Then(string.Format("Verify existing types are same as from the context for recipe \"{0}\" in meal perio" +
                        "d \"{1}\"", recipeName, mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Saving decimal values")]
        [NUnit.Framework.CategoryAttribute("TC29954")]
        [NUnit.Framework.CategoryAttribute("D24588")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.CategoryAttribute("critical")]
        [NUnit.Framework.TestCaseAttribute("QAI", "Meda", "MONDAY", "004Baked Beans_3", "LUNCH", null, Category="QAI")]
        public virtual void SavingDecimalValues(string environment, string menuCycle, string day, string recipeName, string mealPeriod, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "TC29954",
                    "D24588",
                    "Smoke",
                    "critical"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Saving decimal values", @__tags);
#line 439
this.ScenarioSetup(scenarioInfo);
#line 440
    testRunner.Given(string.Format("Menu Cycle app is open on \"{0}\"", environment), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 441
        testRunner.And("a central user is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 442
        testRunner.And(string.Format("Menu Cycle \"{0}\" is selected", menuCycle), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 443
        testRunner.And(string.Format("planning for \"{0}\" is opened", day), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "MealPeriodName",
                        "TYPE",
                        "RecipeTitle",
                        "SellPrice"});
            table26.AddRow(new string[] {
                        string.Format("{0}", mealPeriod),
                        "RECIPE",
                        string.Format("{0}", recipeName),
                        "0#99"});
#line 444
    testRunner.When("data for recipes is set", ((string)(null)), table26, "When ");
#line 447
        testRunner.And("Save button is clicked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 448
        testRunner.And(string.Format("\"SellPrice\" is saved in context for recipe \"{0}\" in meal period \"{1}\"", recipeName, mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 449
        testRunner.And("Cancel button is clicked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 450
        testRunner.And(string.Format("planning for \"{0}\" is opened", day), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 451
    testRunner.Then(string.Format("Verify \"SellPrice\" is equal to the value saved in context for recipe \"{0}\" in mea" +
                        "l period \"{1}\"", recipeName, mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Confirm dialog is not shown after save with added TariffTypes")]
        [NUnit.Framework.CategoryAttribute("TC29987")]
        [NUnit.Framework.TestCaseAttribute("QAI", "Meda", "MONDAY", "004Baked Beans_3", "LUNCH", null, Category="QAI")]
        public virtual void ConfirmDialogIsNotShownAfterSaveWithAddedTariffTypes(string environment, string menuCycle, string day, string recipeName, string mealPeriod, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "TC29987"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Confirm dialog is not shown after save with added TariffTypes", @__tags);
#line 459
this.ScenarioSetup(scenarioInfo);
#line 460
    testRunner.Given(string.Format("Menu Cycle app is open on \"{0}\"", environment), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 461
        testRunner.And("a central user is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 462
        testRunner.And(string.Format("Menu Cycle \"{0}\" is selected", menuCycle), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 463
        testRunner.And(string.Format("planning for \"{0}\" is opened", day), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 464
    testRunner.When(string.Format("Add type is clicked for recipe \"{0}\" in meal period \"{1}\"", recipeName, mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 465
        testRunner.And(string.Format("\"Planned Qty\" for recipe with name \"{0}\" with TariffType \"TariffTwo\" in meal peri" +
                        "od \"{1}\" is set to \"32\"", recipeName, mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 466
        testRunner.And(string.Format("\"Sell Price\" for recipe with name \"{0}\" with TariffType \"TariffTwo\" in meal perio" +
                        "d \"{1}\" is set to \"32\"", recipeName, mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 467
        testRunner.And("Save button is clicked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 468
        testRunner.And("Verify notification message \"Planning figures updated.\" is displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 469
        testRunner.And("Cancel button is clicked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 470
        testRunner.And("Wait for Calendar view", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 471
    testRunner.Then("Verify calendar view is opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 472
        testRunner.And(string.Format("planning for \"{0}\" is opened", day), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 473
        testRunner.And(string.Format("Verify delete icon is clicked for recipe \"{0}\" in meal period \"{1}\" with tariff t" +
                        "ype \"TariffTwo\"", recipeName, mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 474
        testRunner.And("Save button is clicked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 475
        testRunner.And("Verify notification message \"Planning figures updated.\" is displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Saving Planning screen with empty fields displays red border and contextual messa" +
            "ge")]
        [NUnit.Framework.CategoryAttribute("TC30090")]
        [NUnit.Framework.TestCaseAttribute("QAI", "Meda", "MONDAY", "004Baked Beans_3", "LUNCH", null, Category="QAI")]
        public virtual void SavingPlanningScreenWithEmptyFieldsDisplaysRedBorderAndContextualMessage(string environment, string menuCycle, string day, string recipeName, string mealPeriod, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "TC30090"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Saving Planning screen with empty fields displays red border and contextual messa" +
                    "ge", @__tags);
#line 483
this.ScenarioSetup(scenarioInfo);
#line 484
    testRunner.Given(string.Format("Menu Cycle app is open on \"{0}\"", environment), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 485
        testRunner.And("a central user is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 486
        testRunner.And(string.Format("Menu Cycle \"{0}\" is selected", menuCycle), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 487
        testRunner.And(string.Format("planning for \"{0}\" is opened", day), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "MealPeriodName",
                        "TYPE",
                        "RecipeTitle",
                        "SellPrice",
                        "PlannedQuantity"});
            table27.AddRow(new string[] {
                        string.Format("{0}", mealPeriod),
                        "RECIPE",
                        string.Format("{0}", recipeName),
                        "invalidinput",
                        ""});
#line 488
    testRunner.When("data for recipes is set", ((string)(null)), table27, "When ");
#line 491
    testRunner.And("Save button is clicked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 492
    testRunner.Then(string.Format("Verify red border and contextual error message \"Value is required\" is displayed f" +
                        "or Planned Quantity field for recipe \"{0}\" in meal period \"{1}\"", recipeName, mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 493
    testRunner.And(string.Format("Verify red border and contextual error message \"Must be number\" is displayed for " +
                        "Sell Price field for recipe \"{0}\" in meal period \"{1}\"", recipeName, mealPeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

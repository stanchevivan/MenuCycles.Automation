using System;using System.Linq;using MenuCycle.Tests.Models;using MenuCycle.Tests.PageObjects;using NUnit.Framework;using TechTalk.SpecFlow;using TechTalk.SpecFlow.Assist;namespace MenuCycle.Tests.Steps{    [Binding]    public class LocalUserPlanningSteps    {        readonly PlanningView planningView;        readonly PlanningTabDays planningTabDays;        readonly PlanningTabWeeks planningTabWeeks;        readonly NutritionTabDays nutritionTabDays;        readonly MenuCycleCalendarView menuCycleCalendarView;        readonly CreateMealPeriod createMealPeriod;        readonly RecipeSearch recipeSearch;        readonly ToastNotification notification;        readonly ScenarioContext scenarioContext;        readonly LogInAs loginAs;        readonly PostProductionTabDays postProductionTabDays;        readonly MenuCyclesDashboard menuCyclesDashboard;        public LocalUserPlanningSteps(ScenarioContext scenarioContext, PlanningView dailyPlanningView, PlanningTabDays planningTab, PlanningTabWeeks planningTabWeeks, NutritionTabDays nutritionTab, MenuCycleCalendarView menuCycleCalendarView,                                      CreateMealPeriod createMealPeriod, RecipeSearch recipeSearch, ToastNotification notification, LogInAs loginAs, PostProductionTabDays postProductionTabDays,MenuCyclesDashboard menuCyclesDashboard)        {            this.planningView = dailyPlanningView;            this.planningTabDays = planningTab;            this.planningTabWeeks = planningTabWeeks;            this.nutritionTabDays = nutritionTab;            this.menuCycleCalendarView = menuCycleCalendarView;            this.createMealPeriod = createMealPeriod;            this.recipeSearch = recipeSearch;            this.notification = notification;            this.loginAs = loginAs;            this.postProductionTabDays = postProductionTabDays;            this.menuCyclesDashboard = menuCyclesDashboard;            this.scenarioContext = scenarioContext;        }        [Given(@"location ""(.*)"" is selected")]        public void GivenLocationIsSelected(string locationName)        {            loginAs.SearchLocation(locationName);            loginAs.SelectLocation(locationName);            menuCyclesDashboard.WaitPageLoad();        }        [Then(@"location name ""(.*)"" is present on the top of the planning")]        public void ThenLocationNameIsPresentOnTheTopOfThePlanning(string locationName)        {            Assert.That(planningTabDays.DailyPlanningTitleText, Is.EqualTo(locationName));        }        [Given(@"daily post-production tab is opened")]        [When(@"daily post-production tab is opened")]        public void WhenPostProductionTabIsOpened()        {            planningView.OpenPostProductionTab();            postProductionTabDays.WaitForLoad();        }        [When(@"Home button is clicked")]        public void WhenHomeButtonIsClicked()        {            menuCycleCalendarView.WaitPageLoad();            menuCycleCalendarView.UseHomeButton();        }        [Then(@"Create menu cycle button is not displayed")]        public void ThenCreateMenuCycleButtonIsNotDisplayed()        {            Assert.IsFalse(menuCyclesDashboard.IsCreateMenuCycleButtonPresent());           }    }}
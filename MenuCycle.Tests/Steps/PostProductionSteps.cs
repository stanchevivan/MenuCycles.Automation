using System;using System.Linq;using MenuCycle.Tests.Models;using MenuCycle.Tests.PageObjects;using NUnit.Framework;using TechTalk.SpecFlow;using TechTalk.SpecFlow.Assist;namespace MenuCycle.Tests.Steps{    [Binding]    public class PostProductionSteps    {        readonly PlanningView planningView;        readonly PlanningTabDays planningTabDays;        readonly PlanningTabWeeks planningTabWeeks;        readonly NutritionTabDays nutritionTabDays;        readonly MenuCycleDailyCalendarView menuCycleDailyCalendarView;        readonly RecipeSearch recipeSearch;        readonly ToastNotification notification;        readonly ScenarioContext scenarioContext;        readonly PostProductionTabDays postProductionTabDays;        readonly PostProductionTabWeeks postProductionTabWeeks;        public PostProductionSteps(ScenarioContext scenarioContext, PlanningView dailyPlanningView, PlanningTabDays planningTab, PlanningTabWeeks planningTabWeeks, NutritionTabDays nutritionTab, MenuCycleDailyCalendarView menuCycleDailyCalendarView,                                   RecipeSearch recipeSearch, ToastNotification notification, PostProductionTabDays postProductionTabDays, PostProductionTabWeeks postProductionTabWeeks)        {            this.planningView = dailyPlanningView;            this.planningTabDays = planningTab;            this.planningTabWeeks = planningTabWeeks;            this.nutritionTabDays = nutritionTab;            this.menuCycleDailyCalendarView = menuCycleDailyCalendarView;            this.recipeSearch = recipeSearch;            this.notification = notification;            this.postProductionTabDays = postProductionTabDays;            this.postProductionTabWeeks = postProductionTabWeeks;            this.scenarioContext = scenarioContext;        }        [Then(@"Verify all post production meal periods are expanded")]        public void VerifyAllPostProductionMealPeriodsAreExpanded()        {            Assert.IsTrue(postProductionTabDays.AreAllMealPeriodsExpanded);        }        [Then(@"Verify all post production meal periods are collapsed")]        public void VerifyAllPostProductionMealPeriodsAreCollapsed()        {            Assert.IsTrue(postProductionTabDays.AreAllMealPeriodsCollapsed);        }        [When(@"Post-production meal period ""(.*)"" is collapsed")]        public void WhenMealPeriodIsCollapsed(string periodName)        {            postProductionTabDays.GetMealPeriod(periodName).Collapse();        }        [When(@"Post-production meal period ""(.*)"" is expanded")]        public void WhenMealPeriodIsExpanded(string periodName)        {            postProductionTabDays.GetMealPeriod(periodName).Expand();        }        [Then(@"Verify main data for Meal Period ""(.*)"" is collapsed in Post production days")]        public void ThenMainDataForMealPeriodIsCollapsedInPostProductionDays(string periodName)        {            Assert.IsFalse(postProductionTabDays.GetMealPeriod(periodName).IsExpanded);        }        [Then(@"Verify main data for Meal Period ""(.*)"" is expanded in Post production days")]        public void ThenMainDataForMealPeriodIsExpandedInPostProductionDays(string periodName)        {            Assert.IsTrue(postProductionTabDays.GetMealPeriod(periodName).IsExpanded);        }        [Then(@"Verify planned quantity daily total equals the sum of all meal period totals")]        public void VerifyDailyTotalEqualsTheSumOfAllMealPeriodTotals()        {            var sumOfMealPeriodQuantities = postProductionTabDays.MealPeriods.Sum(x => int.Parse(x.PlannedQuantity));            Assert.That(sumOfMealPeriodQuantities, Is.EqualTo(int.Parse(postProductionTabDays.PlannedQtyTotal)));        }        [When(@"values are entered for recipe ""(.*)"" tariff ""(.*)"" in meal period ""(.*)""")]        public void WhenValuesAreEnteredFor(string recipeName, string tariff, string mealPeriod, Table table)        {            var recipeRow = postProductionTabDays.GetMealPeriod(mealPeriod)            .GetRecipe(recipeName)            .GetRow(tariff);

            dynamic values = table.CreateDynamicInstance();            recipeRow.QuantityRequired = Convert.ToString(values.qtyReqd);
            recipeRow.QuantityProduced = Convert.ToString(values.qtyProd);            recipeRow.QuantitySold = Convert.ToString(values.qtySold);            recipeRow.NoCharge = Convert.ToString(values.noCharge);            recipeRow.ReturnToStock = Convert.ToString(values.returnToStock);        }

        [Then(@"Verify Wastage is correctly calculated for recipe ""(.*)"" tariff ""(.*)"" in meal period ""(.*)""")]        public void ThenVerifyWastageIsCorrectlyCalculatedForRecipe(string recipeName, string tariff, string mealPeriod)        {
            var recipeRow = postProductionTabDays.GetMealPeriod(mealPeriod)
                 .GetRecipe(recipeName)
                 .GetRow(tariff);            Assert.That(int.Parse(recipeRow.Wastage), Is.EqualTo(            int.Parse(recipeRow.QuantityProduced)
                - int.Parse(recipeRow.QuantitySold) - int.Parse(recipeRow.NoCharge) - int.Parse(recipeRow.ReturnToStock)));        }        [Then(@"Verify context errors are present for recipe ""(.*)"" tariff ""(.*)"" in meal period ""(.*)""")]        public void ThenVerifyContextErrorsArePresentForFields(string recipeName, string tariff, string mealPeriod, Table table)        {            dynamic messages = table.CreateDynamicInstance();            var recipeRow = postProductionTabDays.GetMealPeriod(mealPeriod)                 .GetRecipe(recipeName)                 .GetRow(tariff);            Assert.That(recipeRow.QtyProdContextError, Is.EqualTo(messages.qtyProd));            Assert.That(recipeRow.QtyReqdContextError, Is.EqualTo(messages.qtyReqd));            Assert.That(recipeRow.QtySoldContextError, Is.EqualTo(messages.qtySold));            Assert.That(recipeRow.NoChargeContextError, Is.EqualTo(messages.noCharge));            Assert.That(recipeRow.ReturnToStockContextError, Is.EqualTo(messages.returnToStock));        }        [When(@"switching to Weekly Post-Production view")]        public void WhenSwitchingToWeeklyPost_ProductionView()        {            postProductionTabDays.UseWeeksButton();            postProductionTabWeeks.WaitForLoad();        }        [Then(@"Verify Weekly Post-production view is open")]        public void ThenVerifyWeeklyPost_ProductionViewIsOpen()        {            Assert.IsTrue(postProductionTabWeeks.IsPageLoaded);        }

        [Then(@"Verify Qty Sold input field is disabled for buffet ""(.*)"" in meal period ""(.*)""")]        public void ThenVerifyQtySoldInputFieldIsDisabledForBuffet(string buffetName, string mealPeriod)        {            var buffet = postProductionTabDays.GetMealPeriod(mealPeriod).GetBuffet(buffetName);            Assert.IsFalse(buffet.IsSoldQtyEnabled);        }
    }}
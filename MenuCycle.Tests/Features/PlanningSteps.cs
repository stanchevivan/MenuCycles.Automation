using System;using System.Linq;using MenuCycle.Tests.Models;using MenuCycle.Tests.PageObjects;using NUnit.Framework;using TechTalk.SpecFlow;using TechTalk.SpecFlow.Assist;namespace MenuCycle.Tests.Steps{    [Binding]    public class PlanningSteps    {        readonly PlanningView planningView;        readonly PlanningTabDays planningTabDays;        readonly PlanningTabWeeks planningTabWeeks;        readonly NutritionTabDays nutritionTabDays;
        readonly NutritionTabWeeks nutritionTabWeeks;
        readonly MenuCycleDailyCalendarView menuCycleDailyCalendarView;        readonly RecipeSearch recipeSearch;        readonly ToastNotification notification;        readonly ScenarioContext scenarioContext;        public PlanningSteps(ScenarioContext scenarioContext, PlanningView dailyPlanningView, PlanningTabDays planningTab, PlanningTabWeeks planningTabWeeks, NutritionTabDays nutritionTab, MenuCycleDailyCalendarView menuCycleDailyCalendarView,            RecipeSearch recipeSearch, ToastNotification notification, NutritionTabWeeks nutritionTabWeeks)        {            this.planningView = dailyPlanningView;            this.planningTabDays = planningTab;            this.planningTabWeeks = planningTabWeeks;            this.nutritionTabDays = nutritionTab;            this.menuCycleDailyCalendarView = menuCycleDailyCalendarView;            this.recipeSearch = recipeSearch;            this.notification = notification;            this.nutritionTabWeeks = nutritionTabWeeks;            this.scenarioContext = scenarioContext;        }        [Then(@"Verify the screen for ""(.*)"" is open")]        public void ThenThePlanningScreenForADayIsOpened(string weekDay)        {            Assert.That(planningView.HeaderText.ToUpper(), Is.EqualTo(weekDay.ToUpper()));        }        [StepDefinition(@"nutrition tab is opened")]        public void WhenNutritionTabIsOpened()        {            planningView.OpenNutritionTab();            nutritionTabDays.WaitForLoad();        }        [Given(@"daily nutrition tab is clicked")]        [When(@"daily nutrition tab is clicked")]        public void WhenNutritionTabIsClicked()        {
            planningView.OpenNutritionTab();
        }

        [StepDefinition(@"Weeks tab is opened")]        public void WhenWeeksTabIsOpened()        {            planningView.UseWeeksButton();            planningView.WaitForLoad();        }

        [StepDefinition(@"Days tab is opened")]        public void WhenDaysTabIsOpened()        {            planningView.UseDaysButton();            planningView.WaitForLoad();        }        [When(@"planning tab is opened")]        public void WhenPlanningTabIsOpened()        {            planningView.OpenDailyPlanningTab();
            planningView.WaitForLoad();        }        [Then(@"Verify Weekly Planning view is open")]        public void VerifyWeeklyPlanningViewIsOpen()        {            Assert.IsTrue(planningView.IsPageLoaded);        }        [Given(@"weekly Planning view link is clicked")]        [When(@"weekly Planning view link is clicked")]        public void WeeklyPlanningViewIsClicked()        {            planningTabDays.SwitchToWeeklyView();        }        [Given(@"Save button is clicked")]        [When(@"Save button is clicked")]        [Then(@"Save button is clicked")]        public void WhenSaveButtonIsClicked()        {            planningTabDays.UseSavebutton();            planningTabDays.WaitSpinnerToDisappear();        }        [Then(@"Verify the user stays on the planning page")]        public void ThenTheUserStaysOnThePlanningPage()        {            Assert.IsTrue(planningTabDays.IsPlanningTabOpen);        }        [Given(@"quantity for recipe named ""(.*)"" in meal period ""(.*)"" is set to random number")]        [When(@"quantity for recipe named ""(.*)"" in meal period ""(.*)"" is set to random number")]        public void WhenQuantityForRecipeNamedInMealPeriodIsSetToRandomNumber(string recipeName, string mealPeriod)        {            var previousValue = planningTabDays                .GetMealPeriod(mealPeriod)                .GetRecipe(recipeName)                .GetFirstRow()                .PlannedQuantity;            var randomValue = CommonHerlpers.GetRandomValueExcluding(previousValue);            scenarioContext.Add("RecipeQuantity", randomValue);            planningTabDays                .GetMealPeriod(mealPeriod)                .GetRecipe(recipeName)                .GetFirstRow()                .PlannedQuantity = randomValue;        }        [Then(@"Verify quantity for recipe named ""(.*)"" in meal period ""(.*)"" is equal to the previous inputted number")]        public void ThenQuantityForRecipeNamedInMealPeriodIsEqualTo(string recipeName, string mealPeriod)        {            Assert.That(planningTabDays                        .GetMealPeriod(mealPeriod)                        .GetRecipe(recipeName)                        .GetFirstRow()                        .PlannedQuantity,                        Is.EqualTo(scenarioContext.Get<string>("RecipeQuantity")));        }        [Given(@"SellPrice for recipe named ""(.*)"" in meal period ""(.*)"" is set to random number")]        [When(@"SellPrice for recipe named ""(.*)"" in meal period ""(.*)"" is set to random number")]        public void WhenSellPriceForRecipeNamedInMealPeriodIsSetToRandomNumber(string recipeName, string mealPeriod)        {            var previousValue = planningTabDays                .GetMealPeriod(mealPeriod)                .GetRecipe(recipeName)                .GetFirstRow()                .SellPrice;            var randomValue = CommonHerlpers.GetRandomValueExcluding(previousValue);            scenarioContext.Add("SellPrice", randomValue);            planningTabDays                .GetMealPeriod(mealPeriod)                .GetRecipe(recipeName)                .GetFirstRow()                .SellPrice = randomValue;        }

        [When(@"Next day button is selected")]
        [Then(@"Next day button is selected")]
        public void WhenNextDayButtonIsSelected()
        {
            planningTabDays.ClickNextDayButton();
            planningTabDays.WaitSpinnerToDisappear();
        }

        [When(@"Previous day button is selected")]
        public void WhenPreviousDayButtonIsSelected()
        {
            planningTabDays.ClickPreviousDayButton();
            planningTabDays.WaitSpinnerToDisappear();
        }        [Then(@"SellPrice for recipe named ""(.*)"" in meal period ""(.*)"" is equal to the previous inputted number")]        public void ThenSellPriceForRecipeNamedInMealPeriodIsEqualTo(string recipeName, string mealPeriod)        {            Assert.That(planningTabDays                        .GetMealPeriod(mealPeriod)                        .GetRecipe(recipeName)                        .GetFirstRow()                        .SellPrice,                        Is.EqualTo(scenarioContext.Get<string>("SellPrice")));        }        [Given(@"Cancel button is clicked")]        [When(@"Cancel button is clicked")]        public void WhenCancelButtonIsClicked()        {            planningTabDays.UseCancelButton();        }        [Given(@"Cross button is clicked")]        [When(@"Cross button is clicked")]        public void WhenCrossButtonIsClicked()        {            planningTabDays.UseCrossButton();        }        [Given(@"Cross button is clicked and calendar view has loaded")]        [When(@"Cross button is clicked and calendar view has loaded")]        public void WhenCrossButtonIsClickedAndCalendaarViewHasLoaded()        {            planningTabDays.UseCrossButton();            menuCycleDailyCalendarView.WaitPageLoad();        }

        [Given(@"Cancel button is clicked and calendar view has loaded")]        [When(@"Cancel button is clicked and calendar view has loaded")]        public void WhenCancelButtonIsClickedAndCalendaarViewHasLoaded()        {            planningTabDays.UseCancelButton();            menuCycleDailyCalendarView.WaitPageLoad();        }        [Given(@"Number of covers for meal period ""(.*)"" is set to random number")]        [When(@"Number of covers for meal period ""(.*)"" is set to random number")]        public void WhenNumberOfCoversValueForMealPeriodIsSetTo(string mealPeriod)        {            var previousValue = planningTabDays                .GetMealPeriod(mealPeriod)                .NumberOfCovers;            var randomValue = CommonHerlpers.GetRandomValueExcluding(previousValue);            scenarioContext.Add("NumberOfCoversValue", randomValue);            planningTabDays                .GetMealPeriod(mealPeriod)                .NumberOfCovers = randomValue;        }        [Given(@"Verify number of covers for meal period ""(.*)"" is equal to the previous inputted number")]        [Then(@"Verify number of covers for meal period ""(.*)"" is equal to the previous inputted number")]        public void ThenQuantityForRecipeNamedNumberOfCoversFoMealPeriodIsEqualToThePreviousInputedNumber(string mealPeriod)        {            Assert.That(planningTabDays                        .GetMealPeriod(mealPeriod)                        .NumberOfCovers,                        Is.EqualTo(scenarioContext.Get<string>("NumberOfCoversValue")));        }        [When(@"quantity for recipe named ""(.*)"" in meal period ""(.*)"" is set to ""(.*)""")]        public void WhenQuantityForRecipeNamedInMealPeriodIsSetTo(string recipeName, string mealPeriod, string value)        {            planningTabDays                .GetMealPeriod(mealPeriod)                .GetRecipe(recipeName)                .GetFirstRow()                .PlannedQuantity = value;            planningTabDays.FocusOut();        }        [StepDefinition(@"Verify notification message ""(.*)"" is displayed")]        public void WhenSaveButtonIsClickedAndTheMessageIsDisplayed(string message)        {            notification.ValidateToastMessage(message);
            // Notification does not disappear on Firefox, when trying to close it when out of focus
            //notification.CloseNotification(); 
            notification.WaitToDisappear();        }        [Then(@"red border is displayed around Planned Quantity for recipe ""(.*)"" in meal period ""(.*)""")]        public void ThenRedBorderIsDisplayedAroundPlannedQuantityForRecipeInMealPeriod(string recipeName, string mealperiod)        {            Assert.IsTrue(planningTabDays.GetMealPeriod(mealperiod).GetRecipe(recipeName).GetFirstRow().IsPlannedQuantityWithRedBorder);        }        [Given(@"Menu Cycles app is closed")]        public void GivenMenuCyclesAppIsClosed()        {            planningView.CloseMenuCyclesApp();        }        [Given(@"values for recipe ""(.*)"" in meal period ""(.*)"" are stored")]        [When(@"values for recipe ""(.*)"" in meal period ""(.*)"" are stored")]        public void ValuesForRecipeAreStored(string recipeName, string mealPeriodName)        {            var dto = planningTabDays.GetMealPeriod(mealPeriodName)                                     .GetRecipe(recipeName).GetFirstRow().GetDTO();            scenarioContext.Add("recipeDTO", dto);        }        [Then(@"Verify values for recipe ""(.*)"" in meal period ""(.*)"" are equal to the stored ones")]        public void ValuesForRecipeAreVerified(string recipeName, string mealPeriodName)        {            var recipe = planningTabDays.GetMealPeriod(mealPeriodName)                           .GetRecipe(recipeName);            var recipeDTO = scenarioContext.Get<RecipeModel>("recipeDTO");            recipe.GetFirstRow().VerifyData(recipeDTO);        }        [When(@"meal periods for the day are ""(.*)""")]        [Then(@"meal periods for the day are ""(.*)""")]        public void MealPeriodsForTheDayAre(string mealperiodNames)        {            var expectedNames = planningTabDays.MealPeriods.Select(x => x.Name).ToList();            var namesList = mealperiodNames.Split(',');            CollectionAssert.AreEqual(namesList.ToList(), expectedNames);        }        [Then(@"Verify Daily Totals are equal to")]        public void ThenDailyTotalsAreEqualTo(Table table)        {            if (!string.IsNullOrEmpty(table.Rows[0]["PlannedQty"]))            {                Assert.That(planningTabDays.DailyPlanedQuanityText, Is.EqualTo(Convert.ToString(table.Rows[0]["PlannedQty"])));            }            if (!string.IsNullOrEmpty(table.Rows[0]["TotalCost"]))            {                Assert.That(planningTabDays.DailyTotalCostText, Is.EqualTo(table.Rows[0]["TotalCost"]));            }            if (!string.IsNullOrEmpty(table.Rows[0]["Revenue"]))            {                Assert.That(planningTabDays.DailyRevenueText, Is.EqualTo(table.Rows[0]["Revenue"]));            }            if (!string.IsNullOrEmpty(table.Rows[0]["ActualGP"]))            {                Assert.That(planningTabDays.DailyActualGPText, Is.EqualTo(table.Rows[0]["ActualGP"]));            }        }        [Then(@"Verify ""(.*)"" message is displayed")]        public void ThenMessageIsDisplayed(string message)        {            Assert.That(planningView.MealPeriodErrorMessage, Is.EqualTo(message));        }        [Then(@"Verify save button is disabled")]        public void ThenSaveButtonIsDisabled()        {            Assert.IsTrue(planningView.IsSaveButtonDisabled());        }        [Given(@"Wait for Calendar view")]        [When(@"Wait for Calendar view")]        public void GivenWaitForCalendarView()        {            menuCycleDailyCalendarView.WaitPageLoad();        }

        [Then(@"Verify weekly planning totals equals the sum of all meal period totals")]        public void VerifyWeeklyTotalEqualsTheSumOfAllMealPeriodTotals()        {            decimal sumOfDaysTotalCosts = planningTabWeeks.Days.Sum(x => decimal.Parse(x.DailyTotalTotalCost));            Assert.That(sumOfDaysTotalCosts, Is.EqualTo(decimal.Parse(planningTabWeeks.WeeklyTotalCostText)));

            decimal sumOfDaysRevenue = planningTabWeeks.Days.Sum(x => decimal.Parse(x.DailyTotalRevenue));            Assert.That(sumOfDaysRevenue, Is.EqualTo(decimal.Parse(planningTabWeeks.WeeklyRevenueText)));

            decimal sumOfDaysProfit = planningTabWeeks.Days.Sum(x => decimal.Parse(x.DailyTotalProfit));            Assert.That(sumOfDaysProfit, Is.EqualTo(decimal.Parse(planningTabWeeks.WeeklyProfitText)));
            decimal weeklyRevenue = decimal.Parse(planningTabWeeks.WeeklyRevenueText);            decimal weeklyTotalCost = decimal.Parse(planningTabWeeks.WeeklyTotalCostText);
            int calculatedPercentage = (int)Math.Round((weeklyRevenue - weeklyTotalCost) / weeklyRevenue * 100);

            Assert.That(calculatedPercentage + "%", Is.EqualTo(planningTabWeeks.WeeklyActualGPText));        }        [Then(@"Verify meal periods for day ""(.*)"" in planning screen daily are:")]        public void ThenVerifyMealPeriodsForDayAre(string day, Table table)        {            var expectedMealPeriods = table.Rows[0]["mealPeriods"].Split(',');            var currentMealPeriods = planningTabDays.MealPeriods.Select(x => x.Name);            Assert.That(currentMealPeriods, Is.EqualTo(expectedMealPeriods));        }        [Then(@"Verify meal periods for day ""(.*)"" week ""(.*)"" in planning screen weekly are:")]        public void ThenVerifyMealPeriodsForDayInPlanningWeeksAre(string day, string week, Table table)        {            var expectedMealPeriods = table.Rows[0]["mealPeriods"].Split(',');            var currentMealPeriods = planningTabWeeks.GetDay(day).MealPeriodsRows.Select(x => x.Name);            Assert.That(currentMealPeriods, Is.EqualTo(expectedMealPeriods));        }        [Given(@"Calendar tab is clicked")]
        public void GivenCalendarTabIsClicked()
        {
            menuCycleDailyCalendarView.ClickCalendarTab();
        }

        [Then(@"Verify button for next day is not visible")]
        public void ThenVerifyButtonForNextDayIsNotVisible()
        {
            Assert.IsFalse(planningTabDays.IsNextButtonVisible);
        }

        [Then(@"Verify button for previous day is not visible")]
        public void ThenVerifyButtonForPreviousDayIsNotVisible()
        {
            Assert.IsFalse(planningTabDays.IsPreviousButtonVisible);
        }    }}
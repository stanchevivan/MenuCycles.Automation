#!groovy
properties([
	parameters([
		string(name: 'Include_Tags', defaultValue: '', description: 'The test tags to run. Empty if all.'),
		string(name: 'Exclude_Tags', defaultValue: '', description: 'The test tags to exclude.'),
		string(name: 'Remote_Port', defaultValue: '11864', description: 'Only needed for Remote jobs.'),
	])
])

releaseTag = ''
commonReleaseBuildParams = ''
solutionPath = ''
msbuild = ''

solutionName = "MenuCycle.Automation.sln"
projectPath = "MenuCycle.Tests"
projectName = "MenuCycle.Tests.csproj"
remotePort = "$Remote_Port";
remotePath = "~/FromJenkins/${env.JOB_NAME.split('/').last().replaceAll("\\s","")}/${projectPath}"
isRemote = false // Don't change manually

node('IE1UIBLD03') {
	stage ('Get Source Code') {

		checkout([
		$class: 'GitSCM',
		branches: scm.branches,
		extensions: scm.extensions + [[$class: 'CleanCheckout']],
		userRemoteConfigs: scm.userRemoteConfigs
		])

		echo "Retrieved $env.BRANCH_NAME in workspace: $env.WORKSPACE"
	}

	commonReleaseBuildParams = "/p:CI_BuildNum=${env.BUILD_ID};CI_BuildId=${releaseTag}"
	solutionPath = "$env.WORKSPACE/$solutionName"
	msbuild = tool 'v15'

	def jobName = "${env.JOB_NAME}"

	if (jobName.contains("Remote"))
 	{
		isRemote = true
		print "\"Remote\" keyword found. Tests will execute on remote machine.."
	}

	//List of App.config browser transformations to be run by Jenkins
	def device = ''

	// Chech for configuration in Job Name
	device = ['Chrome', 'Firefox', 'IE', 'iPadAir', 'iPadMini4', 'iPadPro9', 'SamsungTabA', 'SamsungTabS'].find
	{
		jobName.contains("${it}")
	}

	// Checking for excluding tags first and removeing them, to avoid passing them as include tags
	// Chech for exclude tags in Job Name
	['-QAI', '-UAT', '-PRELIVE', '-EMEA', '-NA'].each
	{
		if (jobName.contains("${it}"))
		{
				excludeTag("${it}")
				jobName.replace("${it}", "")
		}
	}

	// Chech for include tags in Job Name
	['Smoke', 'QAI', 'UAT', 'PRELIVE', 'EMEA', 'NA'].each
	{
		if (jobName.contains("${it}"))
		{
				includeTag("${it}")
				jobName.replace("${it}", "")
		}
	}

	stage('Initialize')
	{
	 script { currentBuild.description = "Including: ${Include_Tags} Excluding: ${Exclude_Tags}" }

		echo 'Restore nuget packages for solution'
		bat "\"$env.WORKSPACE/Tools/nuget.exe\" restore \"$solutionPath\" -configFile Tools/NugetSources.Config"
		bat "dotnet restore \"$solutionPath\""
	}

	try
	{
			stage ('Build assemblies')
			{
					buildConfigurations(device)
			}
	}
	catch (e)
	{
			echo e.message
			currentBuild.result = "FAILED"
	}

	if (isRemote)
	{
		try
		{
				stage ('Copy build artifacts to remote machine')
				 {
					  bat "C:/Users/Jenkins/ssh.exe UIMCM@0.tcp.ngrok.io -p$remotePort rm -rf ${remotePath}/${device}/"
						bat "C:/Users/Jenkins/ssh.exe UIMCM@0.tcp.ngrok.io -p$remotePort mkdir -p ${remotePath}/${device}/"
						bat "C:/Users/Jenkins/scp.exe -v -r -P $remotePort \"$env.WORKSPACE/${projectPath}/bin/${device}/\" UIMCM@0.tcp.ngrok.io:${remotePath}/"
				 }
		}
		catch (e)
		{
				echo e.message
				currentBuild.result = "FAILED"
		}
	}

	try
	{
			stage ('Run Tests')
			{
					runTests(device)
			}
	}
	catch (e)
	{
			echo e.message
			currentBuild.result = "FAILED"
	}


    try
		{
        stage('Test Results Archive')
				{
					if (isRemote)
					{
						echo "Copying test results from remote machine to workspace.."
						bat "mkdir -p \"$env.WORKSPACE/${projectPath}/bin/${device}/Reports/\""
						bat "C:/Users/Jenkins/scp.exe -v -P $remotePort UIMCM@0.tcp.ngrok.io:~/NUnit.Console-3.8.0/${device}TestResults.xml \"$env.WORKSPACE/\""
						bat "C:/Users/Jenkins/scp.exe -v -P $remotePort UIMCM@0.tcp.ngrok.io:${remotePath}/${device}/Reports/Reports_${device}.json \"$env.WORKSPACE/${projectPath}/bin/\""
					}
						archiveArtifacts artifacts: '*TestResults.xml'
            nunit testResultsPattern: '*TestResults.xml'
            cucumber fileIncludePattern: '**/*.json', jsonReportDirectory: "$projectPath/bin"
        }
    }
		catch (e)
		{
        echo e
        currentBuild.result = "FAILED"
    }
}

def buildConfigurations(device)
{
        echo "Building ${device}"
        bat "\"$msbuild\" \"${solutionPath}\" /t:Rebuild $commonReleaseBuildParams /p:Configuration=\"${device}\""
}

def runTests(device)
{
			def include = ''
			def includeTags = Include_Tags.split(',')
			def isFirstTag = true

			if (Include_Tags != '')
			{
				includeTags.each
				{
					def and = isFirstTag ? '' : " && "
					include += "${and}cat == ${it}"
					isFirstTag = false
				}
			}

			def exclude = ''
			def excludeTags = Exclude_Tags.split(',')
		 	isFirstTag = true

			if (Exclude_Tags != '')
			{
				excludeTags.each
				{
					def or = isFirstTag ? '' : " || "
					exclude += "${or}cat != ${it}"
					isFirstTag = false
				}
			}

			def and = Include_Tags != '' && Exclude_Tags != '' ? " && " : ''
			def where = Include_Tags != '' || Exclude_Tags != '' ? "-where" : ''

      print "Including tags:  ${Include_Tags}"
			print "Excluding tags:  ${Exclude_Tags}"

			if (isRemote)
			{
					print "Running tests remotely.."
					bat "C:/Users/Jenkins/ssh.exe UIMCM@0.tcp.ngrok.io -p$remotePort \"cd /Users/uimcm/NUnit.Console-3.8.0/ ; bash --login /Users/uimcm/NUnit.Console-3.8.0/nunit ${remotePath}/${device}/MenuCycle.Tests.dll ${where} \'${include}${and}${exclude}\' --result:${device}TestResults.xml;format=nunit2\""
			}
			else
			{
					print "Running tests locally.."
					bat "nunit ${projectPath}/bin/${device}/MenuCycle.Tests.dll --result:${device}TestResults.xml;format=nunit2 --framework:net-4.5 ${where} \"${include}${and}${exclude}\""
			}
}

def includeTag(tag)
{
	if (Include_Tags != '')
	{
		Include_Tags += ",${tag}"
	}
	else
	{
		Include_Tags = "${tag}"
	}
}

def excludeTag(tag)
{
	if (Exclude_Tags != '')
	{
		Exclude_Tags += ",${tag}"
	}
	else
	{
		Exclude_Tags = "${tag}"
	}
}
